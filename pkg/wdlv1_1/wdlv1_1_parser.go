// Code generated from WdlV1_1Parser.g4 by ANTLR 4.9.1. DO NOT EDIT.

package wdlparser // WdlV1_1Parser
import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 115, 833,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 3, 145, 10, 3, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 158, 10, 5, 3, 6, 3, 6, 3, 6, 3, 6, 5,
	6, 164, 10, 6, 3, 7, 3, 7, 3, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 9, 3,
	9, 5, 9, 176, 10, 9, 3, 10, 3, 10, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3,
	11, 5, 11, 186, 10, 11, 3, 11, 3, 11, 5, 11, 190, 10, 11, 3, 12, 7, 12,
	193, 10, 12, 12, 12, 14, 12, 196, 11, 12, 3, 13, 3, 13, 7, 13, 200, 10,
	13, 12, 13, 14, 13, 203, 11, 13, 3, 13, 3, 13, 3, 13, 3, 14, 3, 14, 3,
	14, 3, 15, 3, 15, 3, 15, 7, 15, 214, 10, 15, 12, 15, 14, 15, 217, 11, 15,
	3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 7, 15, 224, 10, 15, 12, 15, 14, 15,
	227, 11, 15, 3, 15, 3, 15, 5, 15, 231, 10, 15, 3, 16, 3, 16, 3, 16, 3,
	16, 3, 16, 5, 16, 238, 10, 16, 3, 17, 3, 17, 3, 18, 3, 18, 3, 19, 3, 19,
	3, 19, 3, 19, 3, 19, 3, 19, 7, 19, 250, 10, 19, 12, 19, 14, 19, 253, 11,
	19, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 7, 20, 261, 10, 20, 12, 20,
	14, 20, 264, 11, 20, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3,
	21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21,
	3, 21, 3, 21, 3, 21, 7, 21, 287, 10, 21, 12, 21, 14, 21, 290, 11, 21, 3,
	22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 7, 22, 301,
	10, 22, 12, 22, 14, 22, 304, 11, 22, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23,
	3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 7, 23, 318, 10, 23, 12,
	23, 14, 23, 321, 11, 23, 3, 24, 3, 24, 3, 25, 3, 25, 3, 26, 3, 26, 3, 26,
	3, 26, 3, 26, 3, 26, 7, 26, 333, 10, 26, 12, 26, 14, 26, 336, 11, 26, 3,
	26, 5, 26, 339, 10, 26, 5, 26, 341, 10, 26, 3, 26, 3, 26, 3, 26, 3, 26,
	3, 26, 7, 26, 348, 10, 26, 12, 26, 14, 26, 351, 11, 26, 3, 26, 5, 26, 354,
	10, 26, 7, 26, 356, 10, 26, 12, 26, 14, 26, 359, 11, 26, 3, 26, 3, 26,
	3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3,
	26, 3, 26, 3, 26, 3, 26, 7, 26, 377, 10, 26, 12, 26, 14, 26, 380, 11, 26,
	3, 26, 5, 26, 383, 10, 26, 7, 26, 385, 10, 26, 12, 26, 14, 26, 388, 11,
	26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26,
	3, 26, 7, 26, 401, 10, 26, 12, 26, 14, 26, 404, 11, 26, 3, 26, 5, 26, 407,
	10, 26, 7, 26, 409, 10, 26, 12, 26, 14, 26, 412, 11, 26, 3, 26, 3, 26,
	3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 7, 26, 425,
	10, 26, 12, 26, 14, 26, 428, 11, 26, 3, 26, 5, 26, 431, 10, 26, 7, 26,
	433, 10, 26, 12, 26, 14, 26, 436, 11, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3,
	26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26,
	3, 26, 3, 26, 3, 26, 5, 26, 456, 10, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3,
	26, 3, 26, 3, 26, 3, 26, 7, 26, 466, 10, 26, 12, 26, 14, 26, 469, 11, 26,
	3, 27, 3, 27, 3, 27, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 29, 3, 29, 3,
	29, 3, 30, 3, 30, 3, 30, 5, 30, 485, 10, 30, 3, 30, 7, 30, 488, 10, 30,
	12, 30, 14, 30, 491, 11, 30, 3, 31, 3, 31, 3, 31, 3, 31, 7, 31, 497, 10,
	31, 12, 31, 14, 31, 500, 11, 31, 3, 31, 3, 31, 3, 32, 3, 32, 3, 32, 3,
	32, 3, 32, 3, 32, 3, 32, 5, 32, 511, 10, 32, 3, 33, 7, 33, 514, 10, 33,
	12, 33, 14, 33, 517, 11, 33, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34,
	3, 34, 3, 34, 5, 34, 527, 10, 34, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 7,
	35, 534, 10, 35, 12, 35, 14, 35, 537, 11, 35, 3, 35, 3, 35, 5, 35, 541,
	10, 35, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 7, 36, 548, 10, 36, 12, 36,
	14, 36, 551, 11, 36, 3, 36, 3, 36, 5, 36, 555, 10, 36, 3, 37, 3, 37, 3,
	37, 3, 37, 3, 38, 3, 38, 3, 38, 3, 38, 3, 39, 3, 39, 3, 39, 7, 39, 568,
	10, 39, 12, 39, 14, 39, 571, 11, 39, 3, 39, 3, 39, 3, 40, 3, 40, 3, 40,
	7, 40, 578, 10, 40, 12, 40, 14, 40, 581, 11, 40, 3, 40, 3, 40, 3, 41, 3,
	41, 3, 41, 3, 41, 3, 42, 3, 42, 3, 42, 7, 42, 592, 10, 42, 12, 42, 14,
	42, 595, 11, 42, 3, 42, 3, 42, 3, 43, 3, 43, 3, 43, 7, 43, 602, 10, 43,
	12, 43, 14, 43, 605, 11, 43, 3, 43, 3, 43, 3, 44, 3, 44, 3, 44, 7, 44,
	612, 10, 44, 12, 44, 14, 44, 615, 11, 44, 3, 44, 3, 44, 3, 45, 7, 45, 620,
	10, 45, 12, 45, 14, 45, 623, 11, 45, 3, 46, 3, 46, 7, 46, 627, 10, 46,
	12, 46, 14, 46, 630, 11, 46, 3, 46, 3, 46, 3, 46, 3, 47, 3, 47, 3, 47,
	3, 48, 3, 48, 3, 48, 3, 48, 7, 48, 642, 10, 48, 12, 48, 14, 48, 645, 11,
	48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 7, 48, 653, 10, 48, 12, 48,
	14, 48, 656, 11, 48, 3, 48, 3, 48, 5, 48, 660, 10, 48, 3, 49, 3, 49, 3,
	49, 3, 49, 3, 49, 3, 49, 3, 49, 5, 49, 669, 10, 49, 3, 50, 3, 50, 3, 50,
	3, 50, 6, 50, 675, 10, 50, 13, 50, 14, 50, 676, 3, 50, 3, 50, 3, 51, 3,
	51, 3, 51, 3, 51, 5, 51, 685, 10, 51, 3, 52, 3, 52, 3, 52, 3, 53, 3, 53,
	3, 53, 5, 53, 693, 10, 53, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 7, 54, 700,
	10, 54, 12, 54, 14, 54, 703, 11, 54, 3, 54, 5, 54, 706, 10, 54, 7, 54,
	708, 10, 54, 12, 54, 14, 54, 711, 11, 54, 3, 55, 3, 55, 5, 55, 715, 10,
	55, 3, 55, 3, 55, 3, 56, 3, 56, 3, 56, 3, 57, 3, 57, 3, 57, 7, 57, 725,
	10, 57, 12, 57, 14, 57, 728, 11, 57, 3, 58, 3, 58, 3, 58, 5, 58, 733, 10,
	58, 3, 58, 7, 58, 736, 10, 58, 12, 58, 14, 58, 739, 11, 58, 3, 58, 5, 58,
	742, 10, 58, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 7,
	59, 752, 10, 59, 12, 59, 14, 59, 755, 11, 59, 3, 59, 3, 59, 3, 60, 3, 60,
	3, 60, 3, 60, 3, 60, 3, 60, 7, 60, 765, 10, 60, 12, 60, 14, 60, 768, 11,
	60, 3, 60, 3, 60, 3, 61, 3, 61, 3, 61, 7, 61, 775, 10, 61, 12, 61, 14,
	61, 778, 11, 61, 3, 61, 3, 61, 3, 62, 3, 62, 3, 62, 7, 62, 785, 10, 62,
	12, 62, 14, 62, 788, 11, 62, 3, 62, 3, 62, 3, 63, 3, 63, 3, 63, 3, 63,
	3, 63, 5, 63, 797, 10, 63, 3, 64, 3, 64, 3, 64, 3, 64, 7, 64, 803, 10,
	64, 12, 64, 14, 64, 806, 11, 64, 3, 64, 3, 64, 3, 65, 3, 65, 3, 65, 5,
	65, 813, 10, 65, 3, 66, 3, 66, 7, 66, 817, 10, 66, 12, 66, 14, 66, 820,
	11, 66, 3, 66, 3, 66, 7, 66, 824, 10, 66, 12, 66, 14, 66, 827, 11, 66,
	5, 66, 829, 10, 66, 3, 66, 3, 66, 3, 66, 2, 8, 36, 38, 40, 42, 44, 50,
	67, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36,
	38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72,
	74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106,
	108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 2, 7, 5, 2,
	22, 26, 29, 29, 72, 72, 3, 2, 37, 38, 3, 2, 59, 60, 4, 2, 105, 105, 107,
	107, 4, 2, 111, 111, 113, 113, 2, 884, 2, 132, 3, 2, 2, 2, 4, 139, 3, 2,
	2, 2, 6, 146, 3, 2, 2, 2, 8, 157, 3, 2, 2, 2, 10, 163, 3, 2, 2, 2, 12,
	165, 3, 2, 2, 2, 14, 168, 3, 2, 2, 2, 16, 175, 3, 2, 2, 2, 18, 177, 3,
	2, 2, 2, 20, 189, 3, 2, 2, 2, 22, 194, 3, 2, 2, 2, 24, 197, 3, 2, 2, 2,
	26, 207, 3, 2, 2, 2, 28, 230, 3, 2, 2, 2, 30, 237, 3, 2, 2, 2, 32, 239,
	3, 2, 2, 2, 34, 241, 3, 2, 2, 2, 36, 243, 3, 2, 2, 2, 38, 254, 3, 2, 2,
	2, 40, 265, 3, 2, 2, 2, 42, 291, 3, 2, 2, 2, 44, 305, 3, 2, 2, 2, 46, 322,
	3, 2, 2, 2, 48, 324, 3, 2, 2, 2, 50, 455, 3, 2, 2, 2, 52, 470, 3, 2, 2,
	2, 54, 473, 3, 2, 2, 2, 56, 478, 3, 2, 2, 2, 58, 481, 3, 2, 2, 2, 60, 492,
	3, 2, 2, 2, 62, 510, 3, 2, 2, 2, 64, 515, 3, 2, 2, 2, 66, 526, 3, 2, 2,
	2, 68, 540, 3, 2, 2, 2, 70, 554, 3, 2, 2, 2, 72, 556, 3, 2, 2, 2, 74, 560,
	3, 2, 2, 2, 76, 564, 3, 2, 2, 2, 78, 574, 3, 2, 2, 2, 80, 584, 3, 2, 2,
	2, 82, 588, 3, 2, 2, 2, 84, 598, 3, 2, 2, 2, 86, 608, 3, 2, 2, 2, 88, 621,
	3, 2, 2, 2, 90, 624, 3, 2, 2, 2, 92, 634, 3, 2, 2, 2, 94, 659, 3, 2, 2,
	2, 96, 668, 3, 2, 2, 2, 98, 670, 3, 2, 2, 2, 100, 684, 3, 2, 2, 2, 102,
	686, 3, 2, 2, 2, 104, 689, 3, 2, 2, 2, 106, 694, 3, 2, 2, 2, 108, 712,
	3, 2, 2, 2, 110, 718, 3, 2, 2, 2, 112, 721, 3, 2, 2, 2, 114, 729, 3, 2,
	2, 2, 116, 743, 3, 2, 2, 2, 118, 758, 3, 2, 2, 2, 120, 771, 3, 2, 2, 2,
	122, 781, 3, 2, 2, 2, 124, 796, 3, 2, 2, 2, 126, 798, 3, 2, 2, 2, 128,
	812, 3, 2, 2, 2, 130, 814, 3, 2, 2, 2, 132, 133, 7, 28, 2, 2, 133, 134,
	7, 44, 2, 2, 134, 135, 5, 10, 6, 2, 135, 136, 7, 62, 2, 2, 136, 137, 5,
	10, 6, 2, 137, 138, 7, 45, 2, 2, 138, 3, 3, 2, 2, 2, 139, 140, 7, 27, 2,
	2, 140, 141, 7, 44, 2, 2, 141, 142, 5, 10, 6, 2, 142, 144, 7, 45, 2, 2,
	143, 145, 7, 59, 2, 2, 144, 143, 3, 2, 2, 2, 144, 145, 3, 2, 2, 2, 145,
	5, 3, 2, 2, 2, 146, 147, 7, 33, 2, 2, 147, 148, 7, 44, 2, 2, 148, 149,
	5, 10, 6, 2, 149, 150, 7, 62, 2, 2, 150, 151, 5, 10, 6, 2, 151, 152, 7,
	45, 2, 2, 152, 7, 3, 2, 2, 2, 153, 158, 5, 4, 3, 2, 154, 158, 5, 2, 2,
	2, 155, 158, 5, 6, 4, 2, 156, 158, 9, 2, 2, 2, 157, 153, 3, 2, 2, 2, 157,
	154, 3, 2, 2, 2, 157, 155, 3, 2, 2, 2, 157, 156, 3, 2, 2, 2, 158, 9, 3,
	2, 2, 2, 159, 160, 5, 8, 5, 2, 160, 161, 7, 57, 2, 2, 161, 164, 3, 2, 2,
	2, 162, 164, 5, 8, 5, 2, 163, 159, 3, 2, 2, 2, 163, 162, 3, 2, 2, 2, 164,
	11, 3, 2, 2, 2, 165, 166, 5, 10, 6, 2, 166, 167, 7, 72, 2, 2, 167, 13,
	3, 2, 2, 2, 168, 169, 5, 10, 6, 2, 169, 170, 7, 72, 2, 2, 170, 171, 7,
	54, 2, 2, 171, 172, 5, 32, 17, 2, 172, 15, 3, 2, 2, 2, 173, 176, 5, 12,
	7, 2, 174, 176, 5, 14, 8, 2, 175, 173, 3, 2, 2, 2, 175, 174, 3, 2, 2, 2,
	176, 17, 3, 2, 2, 2, 177, 178, 9, 3, 2, 2, 178, 19, 3, 2, 2, 2, 179, 180,
	7, 39, 2, 2, 180, 181, 7, 54, 2, 2, 181, 190, 5, 28, 15, 2, 182, 185, 7,
	32, 2, 2, 183, 186, 5, 28, 15, 2, 184, 186, 5, 18, 10, 2, 185, 183, 3,
	2, 2, 2, 185, 184, 3, 2, 2, 2, 186, 190, 3, 2, 2, 2, 187, 188, 7, 31, 2,
	2, 188, 190, 5, 28, 15, 2, 189, 179, 3, 2, 2, 2, 189, 182, 3, 2, 2, 2,
	189, 187, 3, 2, 2, 2, 190, 21, 3, 2, 2, 2, 191, 193, 7, 73, 2, 2, 192,
	191, 3, 2, 2, 2, 193, 196, 3, 2, 2, 2, 194, 192, 3, 2, 2, 2, 194, 195,
	3, 2, 2, 2, 195, 23, 3, 2, 2, 2, 196, 194, 3, 2, 2, 2, 197, 201, 7, 79,
	2, 2, 198, 200, 5, 20, 11, 2, 199, 198, 3, 2, 2, 2, 200, 203, 3, 2, 2,
	2, 201, 199, 3, 2, 2, 2, 201, 202, 3, 2, 2, 2, 202, 204, 3, 2, 2, 2, 203,
	201, 3, 2, 2, 2, 204, 205, 5, 32, 17, 2, 205, 206, 7, 43, 2, 2, 206, 25,
	3, 2, 2, 2, 207, 208, 5, 24, 13, 2, 208, 209, 5, 22, 12, 2, 209, 27, 3,
	2, 2, 2, 210, 211, 7, 70, 2, 2, 211, 215, 5, 22, 12, 2, 212, 214, 5, 26,
	14, 2, 213, 212, 3, 2, 2, 2, 214, 217, 3, 2, 2, 2, 215, 213, 3, 2, 2, 2,
	215, 216, 3, 2, 2, 2, 216, 218, 3, 2, 2, 2, 217, 215, 3, 2, 2, 2, 218,
	219, 7, 70, 2, 2, 219, 231, 3, 2, 2, 2, 220, 221, 7, 69, 2, 2, 221, 225,
	5, 22, 12, 2, 222, 224, 5, 26, 14, 2, 223, 222, 3, 2, 2, 2, 224, 227, 3,
	2, 2, 2, 225, 223, 3, 2, 2, 2, 225, 226, 3, 2, 2, 2, 226, 228, 3, 2, 2,
	2, 227, 225, 3, 2, 2, 2, 228, 229, 7, 69, 2, 2, 229, 231, 3, 2, 2, 2, 230,
	210, 3, 2, 2, 2, 230, 220, 3, 2, 2, 2, 231, 29, 3, 2, 2, 2, 232, 238, 7,
	39, 2, 2, 233, 238, 5, 18, 10, 2, 234, 238, 5, 28, 15, 2, 235, 238, 7,
	36, 2, 2, 236, 238, 7, 72, 2, 2, 237, 232, 3, 2, 2, 2, 237, 233, 3, 2,
	2, 2, 237, 234, 3, 2, 2, 2, 237, 235, 3, 2, 2, 2, 237, 236, 3, 2, 2, 2,
	238, 31, 3, 2, 2, 2, 239, 240, 5, 34, 18, 2, 240, 33, 3, 2, 2, 2, 241,
	242, 5, 36, 19, 2, 242, 35, 3, 2, 2, 2, 243, 244, 8, 19, 1, 2, 244, 245,
	5, 38, 20, 2, 245, 251, 3, 2, 2, 2, 246, 247, 12, 4, 2, 2, 247, 248, 7,
	56, 2, 2, 248, 250, 5, 38, 20, 2, 249, 246, 3, 2, 2, 2, 250, 253, 3, 2,
	2, 2, 251, 249, 3, 2, 2, 2, 251, 252, 3, 2, 2, 2, 252, 37, 3, 2, 2, 2,
	253, 251, 3, 2, 2, 2, 254, 255, 8, 20, 1, 2, 255, 256, 5, 40, 21, 2, 256,
	262, 3, 2, 2, 2, 257, 258, 12, 4, 2, 2, 258, 259, 7, 55, 2, 2, 259, 261,
	5, 40, 21, 2, 260, 257, 3, 2, 2, 2, 261, 264, 3, 2, 2, 2, 262, 260, 3,
	2, 2, 2, 262, 263, 3, 2, 2, 2, 263, 39, 3, 2, 2, 2, 264, 262, 3, 2, 2,
	2, 265, 266, 8, 21, 1, 2, 266, 267, 5, 42, 22, 2, 267, 288, 3, 2, 2, 2,
	268, 269, 12, 9, 2, 2, 269, 270, 7, 52, 2, 2, 270, 287, 5, 42, 22, 2, 271,
	272, 12, 8, 2, 2, 272, 273, 7, 53, 2, 2, 273, 287, 5, 42, 22, 2, 274, 275,
	12, 7, 2, 2, 275, 276, 7, 51, 2, 2, 276, 287, 5, 42, 22, 2, 277, 278, 12,
	6, 2, 2, 278, 279, 7, 50, 2, 2, 279, 287, 5, 42, 22, 2, 280, 281, 12, 5,
	2, 2, 281, 282, 7, 48, 2, 2, 282, 287, 5, 42, 22, 2, 283, 284, 12, 4, 2,
	2, 284, 285, 7, 49, 2, 2, 285, 287, 5, 42, 22, 2, 286, 268, 3, 2, 2, 2,
	286, 271, 3, 2, 2, 2, 286, 274, 3, 2, 2, 2, 286, 277, 3, 2, 2, 2, 286,
	280, 3, 2, 2, 2, 286, 283, 3, 2, 2, 2, 287, 290, 3, 2, 2, 2, 288, 286,
	3, 2, 2, 2, 288, 289, 3, 2, 2, 2, 289, 41, 3, 2, 2, 2, 290, 288, 3, 2,
	2, 2, 291, 292, 8, 22, 1, 2, 292, 293, 5, 44, 23, 2, 293, 302, 3, 2, 2,
	2, 294, 295, 12, 5, 2, 2, 295, 296, 7, 59, 2, 2, 296, 301, 5, 44, 23, 2,
	297, 298, 12, 4, 2, 2, 298, 299, 7, 60, 2, 2, 299, 301, 5, 44, 23, 2, 300,
	294, 3, 2, 2, 2, 300, 297, 3, 2, 2, 2, 301, 304, 3, 2, 2, 2, 302, 300,
	3, 2, 2, 2, 302, 303, 3, 2, 2, 2, 303, 43, 3, 2, 2, 2, 304, 302, 3, 2,
	2, 2, 305, 306, 8, 23, 1, 2, 306, 307, 5, 46, 24, 2, 307, 319, 3, 2, 2,
	2, 308, 309, 12, 6, 2, 2, 309, 310, 7, 58, 2, 2, 310, 318, 5, 46, 24, 2,
	311, 312, 12, 5, 2, 2, 312, 313, 7, 67, 2, 2, 313, 318, 5, 46, 24, 2, 314,
	315, 12, 4, 2, 2, 315, 316, 7, 68, 2, 2, 316, 318, 5, 46, 24, 2, 317, 308,
	3, 2, 2, 2, 317, 311, 3, 2, 2, 2, 317, 314, 3, 2, 2, 2, 318, 321, 3, 2,
	2, 2, 319, 317, 3, 2, 2, 2, 319, 320, 3, 2, 2, 2, 320, 45, 3, 2, 2, 2,
	321, 319, 3, 2, 2, 2, 322, 323, 5, 50, 26, 2, 323, 47, 3, 2, 2, 2, 324,
	325, 7, 72, 2, 2, 325, 49, 3, 2, 2, 2, 326, 327, 8, 26, 1, 2, 327, 328,
	7, 72, 2, 2, 328, 340, 7, 40, 2, 2, 329, 334, 5, 32, 17, 2, 330, 331, 7,
	62, 2, 2, 331, 333, 5, 32, 17, 2, 332, 330, 3, 2, 2, 2, 333, 336, 3, 2,
	2, 2, 334, 332, 3, 2, 2, 2, 334, 335, 3, 2, 2, 2, 335, 338, 3, 2, 2, 2,
	336, 334, 3, 2, 2, 2, 337, 339, 7, 62, 2, 2, 338, 337, 3, 2, 2, 2, 338,
	339, 3, 2, 2, 2, 339, 341, 3, 2, 2, 2, 340, 329, 3, 2, 2, 2, 340, 341,
	3, 2, 2, 2, 341, 342, 3, 2, 2, 2, 342, 456, 7, 41, 2, 2, 343, 357, 7, 44,
	2, 2, 344, 349, 5, 32, 17, 2, 345, 346, 7, 62, 2, 2, 346, 348, 5, 32, 17,
	2, 347, 345, 3, 2, 2, 2, 348, 351, 3, 2, 2, 2, 349, 347, 3, 2, 2, 2, 349,
	350, 3, 2, 2, 2, 350, 353, 3, 2, 2, 2, 351, 349, 3, 2, 2, 2, 352, 354,
	7, 62, 2, 2, 353, 352, 3, 2, 2, 2, 353, 354, 3, 2, 2, 2, 354, 356, 3, 2,
	2, 2, 355, 344, 3, 2, 2, 2, 356, 359, 3, 2, 2, 2, 357, 355, 3, 2, 2, 2,
	357, 358, 3, 2, 2, 2, 358, 360, 3, 2, 2, 2, 359, 357, 3, 2, 2, 2, 360,
	456, 7, 45, 2, 2, 361, 362, 7, 40, 2, 2, 362, 363, 5, 32, 17, 2, 363, 364,
	7, 62, 2, 2, 364, 365, 5, 32, 17, 2, 365, 366, 7, 41, 2, 2, 366, 456, 3,
	2, 2, 2, 367, 386, 7, 42, 2, 2, 368, 369, 5, 32, 17, 2, 369, 370, 7, 47,
	2, 2, 370, 378, 5, 32, 17, 2, 371, 372, 7, 62, 2, 2, 372, 373, 5, 32, 17,
	2, 373, 374, 7, 47, 2, 2, 374, 375, 5, 32, 17, 2, 375, 377, 3, 2, 2, 2,
	376, 371, 3, 2, 2, 2, 377, 380, 3, 2, 2, 2, 378, 376, 3, 2, 2, 2, 378,
	379, 3, 2, 2, 2, 379, 382, 3, 2, 2, 2, 380, 378, 3, 2, 2, 2, 381, 383,
	7, 62, 2, 2, 382, 381, 3, 2, 2, 2, 382, 383, 3, 2, 2, 2, 383, 385, 3, 2,
	2, 2, 384, 368, 3, 2, 2, 2, 385, 388, 3, 2, 2, 2, 386, 384, 3, 2, 2, 2,
	386, 387, 3, 2, 2, 2, 387, 389, 3, 2, 2, 2, 388, 386, 3, 2, 2, 2, 389,
	456, 7, 43, 2, 2, 390, 391, 7, 30, 2, 2, 391, 410, 7, 42, 2, 2, 392, 393,
	5, 48, 25, 2, 393, 394, 7, 47, 2, 2, 394, 402, 5, 32, 17, 2, 395, 396,
	7, 62, 2, 2, 396, 397, 5, 48, 25, 2, 397, 398, 7, 47, 2, 2, 398, 399, 5,
	32, 17, 2, 399, 401, 3, 2, 2, 2, 400, 395, 3, 2, 2, 2, 401, 404, 3, 2,
	2, 2, 402, 400, 3, 2, 2, 2, 402, 403, 3, 2, 2, 2, 403, 406, 3, 2, 2, 2,
	404, 402, 3, 2, 2, 2, 405, 407, 7, 62, 2, 2, 406, 405, 3, 2, 2, 2, 406,
	407, 3, 2, 2, 2, 407, 409, 3, 2, 2, 2, 408, 392, 3, 2, 2, 2, 409, 412,
	3, 2, 2, 2, 410, 408, 3, 2, 2, 2, 410, 411, 3, 2, 2, 2, 411, 413, 3, 2,
	2, 2, 412, 410, 3, 2, 2, 2, 413, 456, 7, 43, 2, 2, 414, 415, 7, 72, 2,
	2, 415, 434, 7, 42, 2, 2, 416, 417, 5, 48, 25, 2, 417, 418, 7, 47, 2, 2,
	418, 426, 5, 32, 17, 2, 419, 420, 7, 62, 2, 2, 420, 421, 5, 48, 25, 2,
	421, 422, 7, 47, 2, 2, 422, 423, 5, 32, 17, 2, 423, 425, 3, 2, 2, 2, 424,
	419, 3, 2, 2, 2, 425, 428, 3, 2, 2, 2, 426, 424, 3, 2, 2, 2, 426, 427,
	3, 2, 2, 2, 427, 430, 3, 2, 2, 2, 428, 426, 3, 2, 2, 2, 429, 431, 7, 62,
	2, 2, 430, 429, 3, 2, 2, 2, 430, 431, 3, 2, 2, 2, 431, 433, 3, 2, 2, 2,
	432, 416, 3, 2, 2, 2, 433, 436, 3, 2, 2, 2, 434, 432, 3, 2, 2, 2, 434,
	435, 3, 2, 2, 2, 435, 437, 3, 2, 2, 2, 436, 434, 3, 2, 2, 2, 437, 456,
	7, 43, 2, 2, 438, 439, 7, 11, 2, 2, 439, 440, 5, 32, 17, 2, 440, 441, 7,
	12, 2, 2, 441, 442, 5, 32, 17, 2, 442, 443, 7, 13, 2, 2, 443, 444, 5, 32,
	17, 2, 444, 456, 3, 2, 2, 2, 445, 446, 7, 40, 2, 2, 446, 447, 5, 32, 17,
	2, 447, 448, 7, 41, 2, 2, 448, 456, 3, 2, 2, 2, 449, 450, 7, 65, 2, 2,
	450, 456, 5, 32, 17, 2, 451, 452, 9, 4, 2, 2, 452, 456, 5, 32, 17, 2, 453,
	456, 5, 30, 16, 2, 454, 456, 7, 72, 2, 2, 455, 326, 3, 2, 2, 2, 455, 343,
	3, 2, 2, 2, 455, 361, 3, 2, 2, 2, 455, 367, 3, 2, 2, 2, 455, 390, 3, 2,
	2, 2, 455, 414, 3, 2, 2, 2, 455, 438, 3, 2, 2, 2, 455, 445, 3, 2, 2, 2,
	455, 449, 3, 2, 2, 2, 455, 451, 3, 2, 2, 2, 455, 453, 3, 2, 2, 2, 455,
	454, 3, 2, 2, 2, 456, 467, 3, 2, 2, 2, 457, 458, 12, 8, 2, 2, 458, 459,
	7, 44, 2, 2, 459, 460, 5, 32, 17, 2, 460, 461, 7, 45, 2, 2, 461, 466, 3,
	2, 2, 2, 462, 463, 12, 7, 2, 2, 463, 464, 7, 64, 2, 2, 464, 466, 7, 72,
	2, 2, 465, 457, 3, 2, 2, 2, 465, 462, 3, 2, 2, 2, 466, 469, 3, 2, 2, 2,
	467, 465, 3, 2, 2, 2, 467, 468, 3, 2, 2, 2, 468, 51, 3, 2, 2, 2, 469, 467,
	3, 2, 2, 2, 470, 471, 7, 4, 2, 2, 471, 472, 7, 83, 2, 2, 472, 53, 3, 2,
	2, 2, 473, 474, 7, 14, 2, 2, 474, 475, 7, 72, 2, 2, 475, 476, 7, 15, 2,
	2, 476, 477, 7, 72, 2, 2, 477, 55, 3, 2, 2, 2, 478, 479, 7, 15, 2, 2, 479,
	480, 7, 72, 2, 2, 480, 57, 3, 2, 2, 2, 481, 482, 7, 5, 2, 2, 482, 484,
	5, 28, 15, 2, 483, 485, 5, 56, 29, 2, 484, 483, 3, 2, 2, 2, 484, 485, 3,
	2, 2, 2, 485, 489, 3, 2, 2, 2, 486, 488, 5, 54, 28, 2, 487, 486, 3, 2,
	2, 2, 488, 491, 3, 2, 2, 2, 489, 487, 3, 2, 2, 2, 489, 490, 3, 2, 2, 2,
	490, 59, 3, 2, 2, 2, 491, 489, 3, 2, 2, 2, 492, 493, 7, 8, 2, 2, 493, 494,
	7, 72, 2, 2, 494, 498, 7, 42, 2, 2, 495, 497, 5, 12, 7, 2, 496, 495, 3,
	2, 2, 2, 497, 500, 3, 2, 2, 2, 498, 496, 3, 2, 2, 2, 498, 499, 3, 2, 2,
	2, 499, 501, 3, 2, 2, 2, 500, 498, 3, 2, 2, 2, 501, 502, 7, 43, 2, 2, 502,
	61, 3, 2, 2, 2, 503, 511, 7, 95, 2, 2, 504, 511, 7, 92, 2, 2, 505, 511,
	7, 93, 2, 2, 506, 511, 7, 94, 2, 2, 507, 511, 5, 66, 34, 2, 508, 511, 5,
	70, 36, 2, 509, 511, 5, 68, 35, 2, 510, 503, 3, 2, 2, 2, 510, 504, 3, 2,
	2, 2, 510, 505, 3, 2, 2, 2, 510, 506, 3, 2, 2, 2, 510, 507, 3, 2, 2, 2,
	510, 508, 3, 2, 2, 2, 510, 509, 3, 2, 2, 2, 511, 63, 3, 2, 2, 2, 512, 514,
	7, 103, 2, 2, 513, 512, 3, 2, 2, 2, 514, 517, 3, 2, 2, 2, 515, 513, 3,
	2, 2, 2, 515, 516, 3, 2, 2, 2, 516, 65, 3, 2, 2, 2, 517, 515, 3, 2, 2,
	2, 518, 519, 7, 97, 2, 2, 519, 520, 5, 64, 33, 2, 520, 521, 7, 97, 2, 2,
	521, 527, 3, 2, 2, 2, 522, 523, 7, 96, 2, 2, 523, 524, 5, 64, 33, 2, 524,
	525, 7, 96, 2, 2, 525, 527, 3, 2, 2, 2, 526, 518, 3, 2, 2, 2, 526, 522,
	3, 2, 2, 2, 527, 67, 3, 2, 2, 2, 528, 541, 7, 99, 2, 2, 529, 530, 7, 100,
	2, 2, 530, 535, 5, 62, 32, 2, 531, 532, 7, 106, 2, 2, 532, 534, 5, 62,
	32, 2, 533, 531, 3, 2, 2, 2, 534, 537, 3, 2, 2, 2, 535, 533, 3, 2, 2, 2,
	535, 536, 3, 2, 2, 2, 536, 538, 3, 2, 2, 2, 537, 535, 3, 2, 2, 2, 538,
	539, 9, 5, 2, 2, 539, 541, 3, 2, 2, 2, 540, 528, 3, 2, 2, 2, 540, 529,
	3, 2, 2, 2, 541, 69, 3, 2, 2, 2, 542, 555, 7, 98, 2, 2, 543, 544, 7, 101,
	2, 2, 544, 549, 5, 72, 37, 2, 545, 546, 7, 112, 2, 2, 546, 548, 5, 72,
	37, 2, 547, 545, 3, 2, 2, 2, 548, 551, 3, 2, 2, 2, 549, 547, 3, 2, 2, 2,
	549, 550, 3, 2, 2, 2, 550, 552, 3, 2, 2, 2, 551, 549, 3, 2, 2, 2, 552,
	553, 9, 6, 2, 2, 553, 555, 3, 2, 2, 2, 554, 542, 3, 2, 2, 2, 554, 543,
	3, 2, 2, 2, 555, 71, 3, 2, 2, 2, 556, 557, 7, 109, 2, 2, 557, 558, 7, 110,
	2, 2, 558, 559, 5, 62, 32, 2, 559, 73, 3, 2, 2, 2, 560, 561, 7, 87, 2,
	2, 561, 562, 7, 88, 2, 2, 562, 563, 5, 62, 32, 2, 563, 75, 3, 2, 2, 2,
	564, 565, 7, 19, 2, 2, 565, 569, 7, 84, 2, 2, 566, 568, 5, 74, 38, 2, 567,
	566, 3, 2, 2, 2, 568, 571, 3, 2, 2, 2, 569, 567, 3, 2, 2, 2, 569, 570,
	3, 2, 2, 2, 570, 572, 3, 2, 2, 2, 571, 569, 3, 2, 2, 2, 572, 573, 7, 89,
	2, 2, 573, 77, 3, 2, 2, 2, 574, 575, 7, 20, 2, 2, 575, 579, 7, 84, 2, 2,
	576, 578, 5, 74, 38, 2, 577, 576, 3, 2, 2, 2, 578, 581, 3, 2, 2, 2, 579,
	577, 3, 2, 2, 2, 579, 580, 3, 2, 2, 2, 580, 582, 3, 2, 2, 2, 581, 579,
	3, 2, 2, 2, 582, 583, 7, 89, 2, 2, 583, 79, 3, 2, 2, 2, 584, 585, 7, 72,
	2, 2, 585, 586, 7, 47, 2, 2, 586, 587, 5, 32, 17, 2, 587, 81, 3, 2, 2,
	2, 588, 589, 7, 21, 2, 2, 589, 593, 7, 42, 2, 2, 590, 592, 5, 80, 41, 2,
	591, 590, 3, 2, 2, 2, 592, 595, 3, 2, 2, 2, 593, 591, 3, 2, 2, 2, 593,
	594, 3, 2, 2, 2, 594, 596, 3, 2, 2, 2, 595, 593, 3, 2, 2, 2, 596, 597,
	7, 43, 2, 2, 597, 83, 3, 2, 2, 2, 598, 599, 7, 17, 2, 2, 599, 603, 7, 42,
	2, 2, 600, 602, 5, 16, 9, 2, 601, 600, 3, 2, 2, 2, 602, 605, 3, 2, 2, 2,
	603, 601, 3, 2, 2, 2, 603, 604, 3, 2, 2, 2, 604, 606, 3, 2, 2, 2, 605,
	603, 3, 2, 2, 2, 606, 607, 7, 43, 2, 2, 607, 85, 3, 2, 2, 2, 608, 609,
	7, 18, 2, 2, 609, 613, 7, 42, 2, 2, 610, 612, 5, 14, 8, 2, 611, 610, 3,
	2, 2, 2, 612, 615, 3, 2, 2, 2, 613, 611, 3, 2, 2, 2, 613, 614, 3, 2, 2,
	2, 614, 616, 3, 2, 2, 2, 615, 613, 3, 2, 2, 2, 616, 617, 7, 43, 2, 2, 617,
	87, 3, 2, 2, 2, 618, 620, 7, 81, 2, 2, 619, 618, 3, 2, 2, 2, 620, 623,
	3, 2, 2, 2, 621, 619, 3, 2, 2, 2, 621, 622, 3, 2, 2, 2, 622, 89, 3, 2,
	2, 2, 623, 621, 3, 2, 2, 2, 624, 628, 7, 79, 2, 2, 625, 627, 5, 20, 11,
	2, 626, 625, 3, 2, 2, 2, 627, 630, 3, 2, 2, 2, 628, 626, 3, 2, 2, 2, 628,
	629, 3, 2, 2, 2, 629, 631, 3, 2, 2, 2, 630, 628, 3, 2, 2, 2, 631, 632,
	5, 32, 17, 2, 632, 633, 7, 43, 2, 2, 633, 91, 3, 2, 2, 2, 634, 635, 5,
	90, 46, 2, 635, 636, 5, 88, 45, 2, 636, 93, 3, 2, 2, 2, 637, 638, 7, 35,
	2, 2, 638, 639, 7, 76, 2, 2, 639, 643, 5, 88, 45, 2, 640, 642, 5, 92, 47,
	2, 641, 640, 3, 2, 2, 2, 642, 645, 3, 2, 2, 2, 643, 641, 3, 2, 2, 2, 643,
	644, 3, 2, 2, 2, 644, 646, 3, 2, 2, 2, 645, 643, 3, 2, 2, 2, 646, 647,
	7, 80, 2, 2, 647, 660, 3, 2, 2, 2, 648, 649, 7, 35, 2, 2, 649, 650, 7,
	75, 2, 2, 650, 654, 5, 88, 45, 2, 651, 653, 5, 92, 47, 2, 652, 651, 3,
	2, 2, 2, 653, 656, 3, 2, 2, 2, 654, 652, 3, 2, 2, 2, 654, 655, 3, 2, 2,
	2, 655, 657, 3, 2, 2, 2, 656, 654, 3, 2, 2, 2, 657, 658, 7, 80, 2, 2, 658,
	660, 3, 2, 2, 2, 659, 637, 3, 2, 2, 2, 659, 648, 3, 2, 2, 2, 660, 95, 3,
	2, 2, 2, 661, 669, 5, 84, 43, 2, 662, 669, 5, 86, 44, 2, 663, 669, 5, 94,
	48, 2, 664, 669, 5, 82, 42, 2, 665, 669, 5, 14, 8, 2, 666, 669, 5, 76,
	39, 2, 667, 669, 5, 78, 40, 2, 668, 661, 3, 2, 2, 2, 668, 662, 3, 2, 2,
	2, 668, 663, 3, 2, 2, 2, 668, 664, 3, 2, 2, 2, 668, 665, 3, 2, 2, 2, 668,
	666, 3, 2, 2, 2, 668, 667, 3, 2, 2, 2, 669, 97, 3, 2, 2, 2, 670, 671, 7,
	7, 2, 2, 671, 672, 7, 72, 2, 2, 672, 674, 7, 42, 2, 2, 673, 675, 5, 96,
	49, 2, 674, 673, 3, 2, 2, 2, 675, 676, 3, 2, 2, 2, 676, 674, 3, 2, 2, 2,
	676, 677, 3, 2, 2, 2, 677, 678, 3, 2, 2, 2, 678, 679, 7, 43, 2, 2, 679,
	99, 3, 2, 2, 2, 680, 685, 5, 14, 8, 2, 681, 685, 5, 114, 58, 2, 682, 685,
	5, 116, 59, 2, 683, 685, 5, 118, 60, 2, 684, 680, 3, 2, 2, 2, 684, 681,
	3, 2, 2, 2, 684, 682, 3, 2, 2, 2, 684, 683, 3, 2, 2, 2, 685, 101, 3, 2,
	2, 2, 686, 687, 7, 15, 2, 2, 687, 688, 7, 72, 2, 2, 688, 103, 3, 2, 2,
	2, 689, 692, 7, 72, 2, 2, 690, 691, 7, 54, 2, 2, 691, 693, 5, 32, 17, 2,
	692, 690, 3, 2, 2, 2, 692, 693, 3, 2, 2, 2, 693, 105, 3, 2, 2, 2, 694,
	695, 7, 17, 2, 2, 695, 709, 7, 47, 2, 2, 696, 701, 5, 104, 53, 2, 697,
	698, 7, 62, 2, 2, 698, 700, 5, 104, 53, 2, 699, 697, 3, 2, 2, 2, 700, 703,
	3, 2, 2, 2, 701, 699, 3, 2, 2, 2, 701, 702, 3, 2, 2, 2, 702, 705, 3, 2,
	2, 2, 703, 701, 3, 2, 2, 2, 704, 706, 7, 62, 2, 2, 705, 704, 3, 2, 2, 2,
	705, 706, 3, 2, 2, 2, 706, 708, 3, 2, 2, 2, 707, 696, 3, 2, 2, 2, 708,
	711, 3, 2, 2, 2, 709, 707, 3, 2, 2, 2, 709, 710, 3, 2, 2, 2, 710, 107,
	3, 2, 2, 2, 711, 709, 3, 2, 2, 2, 712, 714, 7, 42, 2, 2, 713, 715, 5, 106,
	54, 2, 714, 713, 3, 2, 2, 2, 714, 715, 3, 2, 2, 2, 715, 716, 3, 2, 2, 2,
	716, 717, 7, 43, 2, 2, 717, 109, 3, 2, 2, 2, 718, 719, 7, 34, 2, 2, 719,
	720, 7, 72, 2, 2, 720, 111, 3, 2, 2, 2, 721, 726, 7, 72, 2, 2, 722, 723,
	7, 64, 2, 2, 723, 725, 7, 72, 2, 2, 724, 722, 3, 2, 2, 2, 725, 728, 3,
	2, 2, 2, 726, 724, 3, 2, 2, 2, 726, 727, 3, 2, 2, 2, 727, 113, 3, 2, 2,
	2, 728, 726, 3, 2, 2, 2, 729, 730, 7, 10, 2, 2, 730, 732, 5, 112, 57, 2,
	731, 733, 5, 102, 52, 2, 732, 731, 3, 2, 2, 2, 732, 733, 3, 2, 2, 2, 733,
	737, 3, 2, 2, 2, 734, 736, 5, 110, 56, 2, 735, 734, 3, 2, 2, 2, 736, 739,
	3, 2, 2, 2, 737, 735, 3, 2, 2, 2, 737, 738, 3, 2, 2, 2, 738, 741, 3, 2,
	2, 2, 739, 737, 3, 2, 2, 2, 740, 742, 5, 108, 55, 2, 741, 740, 3, 2, 2,
	2, 741, 742, 3, 2, 2, 2, 742, 115, 3, 2, 2, 2, 743, 744, 7, 9, 2, 2, 744,
	745, 7, 40, 2, 2, 745, 746, 7, 72, 2, 2, 746, 747, 7, 16, 2, 2, 747, 748,
	5, 32, 17, 2, 748, 749, 7, 41, 2, 2, 749, 753, 7, 42, 2, 2, 750, 752, 5,
	100, 51, 2, 751, 750, 3, 2, 2, 2, 752, 755, 3, 2, 2, 2, 753, 751, 3, 2,
	2, 2, 753, 754, 3, 2, 2, 2, 754, 756, 3, 2, 2, 2, 755, 753, 3, 2, 2, 2,
	756, 757, 7, 43, 2, 2, 757, 117, 3, 2, 2, 2, 758, 759, 7, 11, 2, 2, 759,
	760, 7, 40, 2, 2, 760, 761, 5, 32, 17, 2, 761, 762, 7, 41, 2, 2, 762, 766,
	7, 42, 2, 2, 763, 765, 5, 100, 51, 2, 764, 763, 3, 2, 2, 2, 765, 768, 3,
	2, 2, 2, 766, 764, 3, 2, 2, 2, 766, 767, 3, 2, 2, 2, 767, 769, 3, 2, 2,
	2, 768, 766, 3, 2, 2, 2, 769, 770, 7, 43, 2, 2, 770, 119, 3, 2, 2, 2, 771,
	772, 7, 17, 2, 2, 772, 776, 7, 42, 2, 2, 773, 775, 5, 16, 9, 2, 774, 773,
	3, 2, 2, 2, 775, 778, 3, 2, 2, 2, 776, 774, 3, 2, 2, 2, 776, 777, 3, 2,
	2, 2, 777, 779, 3, 2, 2, 2, 778, 776, 3, 2, 2, 2, 779, 780, 7, 43, 2, 2,
	780, 121, 3, 2, 2, 2, 781, 782, 7, 18, 2, 2, 782, 786, 7, 42, 2, 2, 783,
	785, 5, 14, 8, 2, 784, 783, 3, 2, 2, 2, 785, 788, 3, 2, 2, 2, 786, 784,
	3, 2, 2, 2, 786, 787, 3, 2, 2, 2, 787, 789, 3, 2, 2, 2, 788, 786, 3, 2,
	2, 2, 789, 790, 7, 43, 2, 2, 790, 123, 3, 2, 2, 2, 791, 797, 5, 120, 61,
	2, 792, 797, 5, 122, 62, 2, 793, 797, 5, 100, 51, 2, 794, 797, 5, 76, 39,
	2, 795, 797, 5, 78, 40, 2, 796, 791, 3, 2, 2, 2, 796, 792, 3, 2, 2, 2,
	796, 793, 3, 2, 2, 2, 796, 794, 3, 2, 2, 2, 796, 795, 3, 2, 2, 2, 797,
	125, 3, 2, 2, 2, 798, 799, 7, 6, 2, 2, 799, 800, 7, 72, 2, 2, 800, 804,
	7, 42, 2, 2, 801, 803, 5, 124, 63, 2, 802, 801, 3, 2, 2, 2, 803, 806, 3,
	2, 2, 2, 804, 802, 3, 2, 2, 2, 804, 805, 3, 2, 2, 2, 805, 807, 3, 2, 2,
	2, 806, 804, 3, 2, 2, 2, 807, 808, 7, 43, 2, 2, 808, 127, 3, 2, 2, 2, 809,
	813, 5, 58, 30, 2, 810, 813, 5, 60, 31, 2, 811, 813, 5, 98, 50, 2, 812,
	809, 3, 2, 2, 2, 812, 810, 3, 2, 2, 2, 812, 811, 3, 2, 2, 2, 813, 129,
	3, 2, 2, 2, 814, 818, 5, 52, 27, 2, 815, 817, 5, 128, 65, 2, 816, 815,
	3, 2, 2, 2, 817, 820, 3, 2, 2, 2, 818, 816, 3, 2, 2, 2, 818, 819, 3, 2,
	2, 2, 819, 828, 3, 2, 2, 2, 820, 818, 3, 2, 2, 2, 821, 825, 5, 126, 64,
	2, 822, 824, 5, 128, 65, 2, 823, 822, 3, 2, 2, 2, 824, 827, 3, 2, 2, 2,
	825, 823, 3, 2, 2, 2, 825, 826, 3, 2, 2, 2, 826, 829, 3, 2, 2, 2, 827,
	825, 3, 2, 2, 2, 828, 821, 3, 2, 2, 2, 828, 829, 3, 2, 2, 2, 829, 830,
	3, 2, 2, 2, 830, 831, 7, 2, 2, 3, 831, 131, 3, 2, 2, 2, 82, 144, 157, 163,
	175, 185, 189, 194, 201, 215, 225, 230, 237, 251, 262, 286, 288, 300, 302,
	317, 319, 334, 338, 340, 349, 353, 357, 378, 382, 386, 402, 406, 410, 426,
	430, 434, 455, 465, 467, 484, 489, 498, 510, 515, 526, 535, 540, 549, 554,
	569, 579, 593, 603, 613, 621, 628, 643, 654, 659, 668, 676, 684, 692, 701,
	705, 709, 714, 726, 732, 737, 741, 753, 766, 776, 786, 796, 804, 812, 818,
	825, 828,
}
var literalNames = []string{
	"", "", "'version'", "'import'", "'workflow'", "'task'", "'struct'", "'scatter'",
	"'call'", "'if'", "'then'", "'else'", "'alias'", "'as'", "'in'", "'input'",
	"'output'", "'parameter_meta'", "'meta'", "'runtime'", "'Boolean'", "'Int'",
	"'Float'", "'String'", "'File'", "'Array'", "'Map'", "'Object'", "'object'",
	"'sep='", "'default='", "'Pair'", "'after'", "'command'", "'None'", "",
	"", "", "'('", "')'", "", "", "'['", "", "'\\'", "", "'<'", "'>'", "'>='",
	"'<='", "'=='", "'!='", "'='", "'&&'", "'||'", "'?'", "'*'", "'+'", "'-'",
	"", "", "';'", "'.'", "'!'", "", "'/'", "'%'", "", "", "", "", "", "",
	"'<<<'", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "'null'", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "'\\>>>'",
}
var symbolicNames = []string{
	"", "LINE_COMMENT", "VERSION", "IMPORT", "WORKFLOW", "TASK", "STRUCT",
	"SCATTER", "CALL", "IF", "THEN", "ELSE", "ALIAS", "AS", "In", "INPUT",
	"OUTPUT", "PARAMETERMETA", "META", "RUNTIME", "BOOLEAN", "INT", "FLOAT",
	"STRING", "FILE", "ARRAY", "MAP", "OBJECT", "OBJECTLITERAL", "SEPEQUAL",
	"DEFAULTEQUAL", "PAIR", "AFTER", "COMMAND", "NONELITERAL", "IntLiteral",
	"FloatLiteral", "BoolLiteral", "LPAREN", "RPAREN", "LBRACE", "RBRACE",
	"LBRACK", "RBRACK", "ESC", "COLON", "LT", "GT", "GTE", "LTE", "EQUALITY",
	"NOTEQUAL", "EQUAL", "AND", "OR", "OPTIONAL", "STAR", "PLUS", "MINUS",
	"DOLLAR", "COMMA", "SEMI", "DOT", "NOT", "TILDE", "DIVIDE", "MOD", "SQUOTE",
	"DQUOTE", "WHITESPACE", "Identifier", "StringPart", "BeginWhitespace",
	"BeginHereDoc", "BeginLBrace", "HereDocUnicodeEscape", "CommandUnicodeEscape",
	"StringCommandStart", "EndCommand", "CommandStringPart", "VersionWhitespace",
	"ReleaseVersion", "BeginMeta", "MetaWhitespace", "MetaBodyComment", "MetaIdentifier",
	"MetaColon", "EndMeta", "MetaBodyWhitespace", "MetaValueComment", "MetaBool",
	"MetaInt", "MetaFloat", "MetaNull", "MetaSquote", "MetaDquote", "MetaEmptyObject",
	"MetaEmptyArray", "MetaLbrack", "MetaLbrace", "MetaValueWhitespace", "MetaStringPart",
	"MetaArrayComment", "MetaArrayCommaRbrack", "MetaArrayComma", "MetaRbrack",
	"MetaArrayWhitespace", "MetaObjectIdentifier", "MetaObjectColon", "MetaObjectCommaRbrace",
	"MetaObjectComma", "MetaRbrace", "MetaObjectWhitespace", "HereDocEscapedEnd",
}

var ruleNames = []string{
	"map_type", "array_type", "pair_type", "type_base", "wdl_type", "unbound_decls",
	"bound_decls", "any_decls", "number", "expression_placeholder_option",
	"string_part", "string_expr_part", "string_expr_with_string_part", "r_string",
	"primitive_literal", "expr", "expr_infix", "expr_infix0", "expr_infix1",
	"expr_infix2", "expr_infix3", "expr_infix4", "expr_infix5", "member", "expr_core",
	"version", "import_alias", "import_as", "import_doc", "r_struct", "meta_value",
	"meta_string_part", "meta_string", "meta_array", "meta_object", "meta_object_kv",
	"meta_kv", "parameter_meta", "meta", "task_runtime_kv", "task_runtime",
	"task_input", "task_output", "task_command_string_part", "task_command_expr_part",
	"task_command_expr_with_string", "task_command", "task_element", "task",
	"inner_workflow_element", "call_alias", "call_input", "call_inputs", "call_body",
	"call_after", "call_name", "call", "scatter", "conditional", "workflow_input",
	"workflow_output", "workflow_element", "workflow", "document_element",
	"document",
}

type WdlV1_1Parser struct {
	*antlr.BaseParser
}

// NewWdlV1_1Parser produces a new parser instance for the optional input antlr.TokenStream.
//
// The *WdlV1_1Parser instance produced may be reused by calling the SetInputStream method.
// The initial parser configuration is expensive to construct, and the object is not thread-safe;
// however, if used within a Golang sync.Pool, the construction cost amortizes well and the
// objects can be used in a thread-safe manner.
func NewWdlV1_1Parser(input antlr.TokenStream) *WdlV1_1Parser {
	this := new(WdlV1_1Parser)
	deserializer := antlr.NewATNDeserializer(nil)
	deserializedATN := deserializer.DeserializeFromUInt16(parserATN)
	decisionToDFA := make([]*antlr.DFA, len(deserializedATN.DecisionToState))
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "WdlV1_1Parser.g4"

	return this
}

// WdlV1_1Parser tokens.
const (
	WdlV1_1ParserEOF                   = antlr.TokenEOF
	WdlV1_1ParserLINE_COMMENT          = 1
	WdlV1_1ParserVERSION               = 2
	WdlV1_1ParserIMPORT                = 3
	WdlV1_1ParserWORKFLOW              = 4
	WdlV1_1ParserTASK                  = 5
	WdlV1_1ParserSTRUCT                = 6
	WdlV1_1ParserSCATTER               = 7
	WdlV1_1ParserCALL                  = 8
	WdlV1_1ParserIF                    = 9
	WdlV1_1ParserTHEN                  = 10
	WdlV1_1ParserELSE                  = 11
	WdlV1_1ParserALIAS                 = 12
	WdlV1_1ParserAS                    = 13
	WdlV1_1ParserIn                    = 14
	WdlV1_1ParserINPUT                 = 15
	WdlV1_1ParserOUTPUT                = 16
	WdlV1_1ParserPARAMETERMETA         = 17
	WdlV1_1ParserMETA                  = 18
	WdlV1_1ParserRUNTIME               = 19
	WdlV1_1ParserBOOLEAN               = 20
	WdlV1_1ParserINT                   = 21
	WdlV1_1ParserFLOAT                 = 22
	WdlV1_1ParserSTRING                = 23
	WdlV1_1ParserFILE                  = 24
	WdlV1_1ParserARRAY                 = 25
	WdlV1_1ParserMAP                   = 26
	WdlV1_1ParserOBJECT                = 27
	WdlV1_1ParserOBJECTLITERAL         = 28
	WdlV1_1ParserSEPEQUAL              = 29
	WdlV1_1ParserDEFAULTEQUAL          = 30
	WdlV1_1ParserPAIR                  = 31
	WdlV1_1ParserAFTER                 = 32
	WdlV1_1ParserCOMMAND               = 33
	WdlV1_1ParserNONELITERAL           = 34
	WdlV1_1ParserIntLiteral            = 35
	WdlV1_1ParserFloatLiteral          = 36
	WdlV1_1ParserBoolLiteral           = 37
	WdlV1_1ParserLPAREN                = 38
	WdlV1_1ParserRPAREN                = 39
	WdlV1_1ParserLBRACE                = 40
	WdlV1_1ParserRBRACE                = 41
	WdlV1_1ParserLBRACK                = 42
	WdlV1_1ParserRBRACK                = 43
	WdlV1_1ParserESC                   = 44
	WdlV1_1ParserCOLON                 = 45
	WdlV1_1ParserLT                    = 46
	WdlV1_1ParserGT                    = 47
	WdlV1_1ParserGTE                   = 48
	WdlV1_1ParserLTE                   = 49
	WdlV1_1ParserEQUALITY              = 50
	WdlV1_1ParserNOTEQUAL              = 51
	WdlV1_1ParserEQUAL                 = 52
	WdlV1_1ParserAND                   = 53
	WdlV1_1ParserOR                    = 54
	WdlV1_1ParserOPTIONAL              = 55
	WdlV1_1ParserSTAR                  = 56
	WdlV1_1ParserPLUS                  = 57
	WdlV1_1ParserMINUS                 = 58
	WdlV1_1ParserDOLLAR                = 59
	WdlV1_1ParserCOMMA                 = 60
	WdlV1_1ParserSEMI                  = 61
	WdlV1_1ParserDOT                   = 62
	WdlV1_1ParserNOT                   = 63
	WdlV1_1ParserTILDE                 = 64
	WdlV1_1ParserDIVIDE                = 65
	WdlV1_1ParserMOD                   = 66
	WdlV1_1ParserSQUOTE                = 67
	WdlV1_1ParserDQUOTE                = 68
	WdlV1_1ParserWHITESPACE            = 69
	WdlV1_1ParserIdentifier            = 70
	WdlV1_1ParserStringPart            = 71
	WdlV1_1ParserBeginWhitespace       = 72
	WdlV1_1ParserBeginHereDoc          = 73
	WdlV1_1ParserBeginLBrace           = 74
	WdlV1_1ParserHereDocUnicodeEscape  = 75
	WdlV1_1ParserCommandUnicodeEscape  = 76
	WdlV1_1ParserStringCommandStart    = 77
	WdlV1_1ParserEndCommand            = 78
	WdlV1_1ParserCommandStringPart     = 79
	WdlV1_1ParserVersionWhitespace     = 80
	WdlV1_1ParserReleaseVersion        = 81
	WdlV1_1ParserBeginMeta             = 82
	WdlV1_1ParserMetaWhitespace        = 83
	WdlV1_1ParserMetaBodyComment       = 84
	WdlV1_1ParserMetaIdentifier        = 85
	WdlV1_1ParserMetaColon             = 86
	WdlV1_1ParserEndMeta               = 87
	WdlV1_1ParserMetaBodyWhitespace    = 88
	WdlV1_1ParserMetaValueComment      = 89
	WdlV1_1ParserMetaBool              = 90
	WdlV1_1ParserMetaInt               = 91
	WdlV1_1ParserMetaFloat             = 92
	WdlV1_1ParserMetaNull              = 93
	WdlV1_1ParserMetaSquote            = 94
	WdlV1_1ParserMetaDquote            = 95
	WdlV1_1ParserMetaEmptyObject       = 96
	WdlV1_1ParserMetaEmptyArray        = 97
	WdlV1_1ParserMetaLbrack            = 98
	WdlV1_1ParserMetaLbrace            = 99
	WdlV1_1ParserMetaValueWhitespace   = 100
	WdlV1_1ParserMetaStringPart        = 101
	WdlV1_1ParserMetaArrayComment      = 102
	WdlV1_1ParserMetaArrayCommaRbrack  = 103
	WdlV1_1ParserMetaArrayComma        = 104
	WdlV1_1ParserMetaRbrack            = 105
	WdlV1_1ParserMetaArrayWhitespace   = 106
	WdlV1_1ParserMetaObjectIdentifier  = 107
	WdlV1_1ParserMetaObjectColon       = 108
	WdlV1_1ParserMetaObjectCommaRbrace = 109
	WdlV1_1ParserMetaObjectComma       = 110
	WdlV1_1ParserMetaRbrace            = 111
	WdlV1_1ParserMetaObjectWhitespace  = 112
	WdlV1_1ParserHereDocEscapedEnd     = 113
)

// WdlV1_1Parser rules.
const (
	WdlV1_1ParserRULE_map_type                      = 0
	WdlV1_1ParserRULE_array_type                    = 1
	WdlV1_1ParserRULE_pair_type                     = 2
	WdlV1_1ParserRULE_type_base                     = 3
	WdlV1_1ParserRULE_wdl_type                      = 4
	WdlV1_1ParserRULE_unbound_decls                 = 5
	WdlV1_1ParserRULE_bound_decls                   = 6
	WdlV1_1ParserRULE_any_decls                     = 7
	WdlV1_1ParserRULE_number                        = 8
	WdlV1_1ParserRULE_expression_placeholder_option = 9
	WdlV1_1ParserRULE_string_part                   = 10
	WdlV1_1ParserRULE_string_expr_part              = 11
	WdlV1_1ParserRULE_string_expr_with_string_part  = 12
	WdlV1_1ParserRULE_r_string                      = 13
	WdlV1_1ParserRULE_primitive_literal             = 14
	WdlV1_1ParserRULE_expr                          = 15
	WdlV1_1ParserRULE_expr_infix                    = 16
	WdlV1_1ParserRULE_expr_infix0                   = 17
	WdlV1_1ParserRULE_expr_infix1                   = 18
	WdlV1_1ParserRULE_expr_infix2                   = 19
	WdlV1_1ParserRULE_expr_infix3                   = 20
	WdlV1_1ParserRULE_expr_infix4                   = 21
	WdlV1_1ParserRULE_expr_infix5                   = 22
	WdlV1_1ParserRULE_member                        = 23
	WdlV1_1ParserRULE_expr_core                     = 24
	WdlV1_1ParserRULE_version                       = 25
	WdlV1_1ParserRULE_import_alias                  = 26
	WdlV1_1ParserRULE_import_as                     = 27
	WdlV1_1ParserRULE_import_doc                    = 28
	WdlV1_1ParserRULE_r_struct                      = 29
	WdlV1_1ParserRULE_meta_value                    = 30
	WdlV1_1ParserRULE_meta_string_part              = 31
	WdlV1_1ParserRULE_meta_string                   = 32
	WdlV1_1ParserRULE_meta_array                    = 33
	WdlV1_1ParserRULE_meta_object                   = 34
	WdlV1_1ParserRULE_meta_object_kv                = 35
	WdlV1_1ParserRULE_meta_kv                       = 36
	WdlV1_1ParserRULE_parameter_meta                = 37
	WdlV1_1ParserRULE_meta                          = 38
	WdlV1_1ParserRULE_task_runtime_kv               = 39
	WdlV1_1ParserRULE_task_runtime                  = 40
	WdlV1_1ParserRULE_task_input                    = 41
	WdlV1_1ParserRULE_task_output                   = 42
	WdlV1_1ParserRULE_task_command_string_part      = 43
	WdlV1_1ParserRULE_task_command_expr_part        = 44
	WdlV1_1ParserRULE_task_command_expr_with_string = 45
	WdlV1_1ParserRULE_task_command                  = 46
	WdlV1_1ParserRULE_task_element                  = 47
	WdlV1_1ParserRULE_task                          = 48
	WdlV1_1ParserRULE_inner_workflow_element        = 49
	WdlV1_1ParserRULE_call_alias                    = 50
	WdlV1_1ParserRULE_call_input                    = 51
	WdlV1_1ParserRULE_call_inputs                   = 52
	WdlV1_1ParserRULE_call_body                     = 53
	WdlV1_1ParserRULE_call_after                    = 54
	WdlV1_1ParserRULE_call_name                     = 55
	WdlV1_1ParserRULE_call                          = 56
	WdlV1_1ParserRULE_scatter                       = 57
	WdlV1_1ParserRULE_conditional                   = 58
	WdlV1_1ParserRULE_workflow_input                = 59
	WdlV1_1ParserRULE_workflow_output               = 60
	WdlV1_1ParserRULE_workflow_element              = 61
	WdlV1_1ParserRULE_workflow                      = 62
	WdlV1_1ParserRULE_document_element              = 63
	WdlV1_1ParserRULE_document                      = 64
)

// IMap_typeContext is an interface to support dynamic dispatch.
type IMap_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMap_typeContext differentiates from other interfaces.
	IsMap_typeContext()
}

type Map_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMap_typeContext() *Map_typeContext {
	var p = new(Map_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_map_type
	return p
}

func (*Map_typeContext) IsMap_typeContext() {}

func NewMap_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Map_typeContext {
	var p = new(Map_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_map_type

	return p
}

func (s *Map_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Map_typeContext) MAP() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMAP, 0)
}

func (s *Map_typeContext) LBRACK() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACK, 0)
}

func (s *Map_typeContext) AllWdl_type() []IWdl_typeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWdl_typeContext)(nil)).Elem())
	var tst = make([]IWdl_typeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWdl_typeContext)
		}
	}

	return tst
}

func (s *Map_typeContext) Wdl_type(i int) IWdl_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWdl_typeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWdl_typeContext)
}

func (s *Map_typeContext) COMMA() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCOMMA, 0)
}

func (s *Map_typeContext) RBRACK() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACK, 0)
}

func (s *Map_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Map_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Map_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterMap_type(s)
	}
}

func (s *Map_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitMap_type(s)
	}
}

func (p *WdlV1_1Parser) Map_type() (localctx IMap_typeContext) {
	localctx = NewMap_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, WdlV1_1ParserRULE_map_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(130)
		p.Match(WdlV1_1ParserMAP)
	}
	{
		p.SetState(131)
		p.Match(WdlV1_1ParserLBRACK)
	}
	{
		p.SetState(132)
		p.Wdl_type()
	}
	{
		p.SetState(133)
		p.Match(WdlV1_1ParserCOMMA)
	}
	{
		p.SetState(134)
		p.Wdl_type()
	}
	{
		p.SetState(135)
		p.Match(WdlV1_1ParserRBRACK)
	}

	return localctx
}

// IArray_typeContext is an interface to support dynamic dispatch.
type IArray_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArray_typeContext differentiates from other interfaces.
	IsArray_typeContext()
}

type Array_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArray_typeContext() *Array_typeContext {
	var p = new(Array_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_array_type
	return p
}

func (*Array_typeContext) IsArray_typeContext() {}

func NewArray_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_typeContext {
	var p = new(Array_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_array_type

	return p
}

func (s *Array_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_typeContext) ARRAY() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserARRAY, 0)
}

func (s *Array_typeContext) LBRACK() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACK, 0)
}

func (s *Array_typeContext) Wdl_type() IWdl_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWdl_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWdl_typeContext)
}

func (s *Array_typeContext) RBRACK() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACK, 0)
}

func (s *Array_typeContext) PLUS() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserPLUS, 0)
}

func (s *Array_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Array_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterArray_type(s)
	}
}

func (s *Array_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitArray_type(s)
	}
}

func (p *WdlV1_1Parser) Array_type() (localctx IArray_typeContext) {
	localctx = NewArray_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, WdlV1_1ParserRULE_array_type)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(137)
		p.Match(WdlV1_1ParserARRAY)
	}
	{
		p.SetState(138)
		p.Match(WdlV1_1ParserLBRACK)
	}
	{
		p.SetState(139)
		p.Wdl_type()
	}
	{
		p.SetState(140)
		p.Match(WdlV1_1ParserRBRACK)
	}
	p.SetState(142)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == WdlV1_1ParserPLUS {
		{
			p.SetState(141)
			p.Match(WdlV1_1ParserPLUS)
		}

	}

	return localctx
}

// IPair_typeContext is an interface to support dynamic dispatch.
type IPair_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPair_typeContext differentiates from other interfaces.
	IsPair_typeContext()
}

type Pair_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPair_typeContext() *Pair_typeContext {
	var p = new(Pair_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_pair_type
	return p
}

func (*Pair_typeContext) IsPair_typeContext() {}

func NewPair_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pair_typeContext {
	var p = new(Pair_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_pair_type

	return p
}

func (s *Pair_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Pair_typeContext) PAIR() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserPAIR, 0)
}

func (s *Pair_typeContext) LBRACK() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACK, 0)
}

func (s *Pair_typeContext) AllWdl_type() []IWdl_typeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWdl_typeContext)(nil)).Elem())
	var tst = make([]IWdl_typeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWdl_typeContext)
		}
	}

	return tst
}

func (s *Pair_typeContext) Wdl_type(i int) IWdl_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWdl_typeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWdl_typeContext)
}

func (s *Pair_typeContext) COMMA() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCOMMA, 0)
}

func (s *Pair_typeContext) RBRACK() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACK, 0)
}

func (s *Pair_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pair_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pair_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterPair_type(s)
	}
}

func (s *Pair_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitPair_type(s)
	}
}

func (p *WdlV1_1Parser) Pair_type() (localctx IPair_typeContext) {
	localctx = NewPair_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, WdlV1_1ParserRULE_pair_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(144)
		p.Match(WdlV1_1ParserPAIR)
	}
	{
		p.SetState(145)
		p.Match(WdlV1_1ParserLBRACK)
	}
	{
		p.SetState(146)
		p.Wdl_type()
	}
	{
		p.SetState(147)
		p.Match(WdlV1_1ParserCOMMA)
	}
	{
		p.SetState(148)
		p.Wdl_type()
	}
	{
		p.SetState(149)
		p.Match(WdlV1_1ParserRBRACK)
	}

	return localctx
}

// IType_baseContext is an interface to support dynamic dispatch.
type IType_baseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsType_baseContext differentiates from other interfaces.
	IsType_baseContext()
}

type Type_baseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_baseContext() *Type_baseContext {
	var p = new(Type_baseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_type_base
	return p
}

func (*Type_baseContext) IsType_baseContext() {}

func NewType_baseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_baseContext {
	var p = new(Type_baseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_type_base

	return p
}

func (s *Type_baseContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_baseContext) Array_type() IArray_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArray_typeContext)
}

func (s *Type_baseContext) Map_type() IMap_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMap_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMap_typeContext)
}

func (s *Type_baseContext) Pair_type() IPair_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPair_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPair_typeContext)
}

func (s *Type_baseContext) STRING() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserSTRING, 0)
}

func (s *Type_baseContext) FILE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserFILE, 0)
}

func (s *Type_baseContext) BOOLEAN() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserBOOLEAN, 0)
}

func (s *Type_baseContext) INT() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserINT, 0)
}

func (s *Type_baseContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserFLOAT, 0)
}

func (s *Type_baseContext) OBJECT() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserOBJECT, 0)
}

func (s *Type_baseContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *Type_baseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_baseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_baseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterType_base(s)
	}
}

func (s *Type_baseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitType_base(s)
	}
}

func (p *WdlV1_1Parser) Type_base() (localctx IType_baseContext) {
	localctx = NewType_baseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, WdlV1_1ParserRULE_type_base)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(155)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case WdlV1_1ParserARRAY:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(151)
			p.Array_type()
		}

	case WdlV1_1ParserMAP:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(152)
			p.Map_type()
		}

	case WdlV1_1ParserPAIR:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(153)
			p.Pair_type()
		}

	case WdlV1_1ParserBOOLEAN, WdlV1_1ParserINT, WdlV1_1ParserFLOAT, WdlV1_1ParserSTRING, WdlV1_1ParserFILE, WdlV1_1ParserOBJECT, WdlV1_1ParserIdentifier:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(154)
			_la = p.GetTokenStream().LA(1)

			if !((((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<WdlV1_1ParserBOOLEAN)|(1<<WdlV1_1ParserINT)|(1<<WdlV1_1ParserFLOAT)|(1<<WdlV1_1ParserSTRING)|(1<<WdlV1_1ParserFILE)|(1<<WdlV1_1ParserOBJECT))) != 0) || _la == WdlV1_1ParserIdentifier) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IWdl_typeContext is an interface to support dynamic dispatch.
type IWdl_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWdl_typeContext differentiates from other interfaces.
	IsWdl_typeContext()
}

type Wdl_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWdl_typeContext() *Wdl_typeContext {
	var p = new(Wdl_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_wdl_type
	return p
}

func (*Wdl_typeContext) IsWdl_typeContext() {}

func NewWdl_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Wdl_typeContext {
	var p = new(Wdl_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_wdl_type

	return p
}

func (s *Wdl_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Wdl_typeContext) Type_base() IType_baseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_baseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_baseContext)
}

func (s *Wdl_typeContext) OPTIONAL() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserOPTIONAL, 0)
}

func (s *Wdl_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Wdl_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Wdl_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterWdl_type(s)
	}
}

func (s *Wdl_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitWdl_type(s)
	}
}

func (p *WdlV1_1Parser) Wdl_type() (localctx IWdl_typeContext) {
	localctx = NewWdl_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, WdlV1_1ParserRULE_wdl_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(161)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 2, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(157)
			p.Type_base()
		}
		{
			p.SetState(158)
			p.Match(WdlV1_1ParserOPTIONAL)
		}

	case 2:
		{
			p.SetState(160)
			p.Type_base()
		}

	}

	return localctx
}

// IUnbound_declsContext is an interface to support dynamic dispatch.
type IUnbound_declsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnbound_declsContext differentiates from other interfaces.
	IsUnbound_declsContext()
}

type Unbound_declsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnbound_declsContext() *Unbound_declsContext {
	var p = new(Unbound_declsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_unbound_decls
	return p
}

func (*Unbound_declsContext) IsUnbound_declsContext() {}

func NewUnbound_declsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unbound_declsContext {
	var p = new(Unbound_declsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_unbound_decls

	return p
}

func (s *Unbound_declsContext) GetParser() antlr.Parser { return s.parser }

func (s *Unbound_declsContext) Wdl_type() IWdl_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWdl_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWdl_typeContext)
}

func (s *Unbound_declsContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *Unbound_declsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unbound_declsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unbound_declsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterUnbound_decls(s)
	}
}

func (s *Unbound_declsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitUnbound_decls(s)
	}
}

func (p *WdlV1_1Parser) Unbound_decls() (localctx IUnbound_declsContext) {
	localctx = NewUnbound_declsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, WdlV1_1ParserRULE_unbound_decls)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(163)
		p.Wdl_type()
	}
	{
		p.SetState(164)
		p.Match(WdlV1_1ParserIdentifier)
	}

	return localctx
}

// IBound_declsContext is an interface to support dynamic dispatch.
type IBound_declsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBound_declsContext differentiates from other interfaces.
	IsBound_declsContext()
}

type Bound_declsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBound_declsContext() *Bound_declsContext {
	var p = new(Bound_declsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_bound_decls
	return p
}

func (*Bound_declsContext) IsBound_declsContext() {}

func NewBound_declsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bound_declsContext {
	var p = new(Bound_declsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_bound_decls

	return p
}

func (s *Bound_declsContext) GetParser() antlr.Parser { return s.parser }

func (s *Bound_declsContext) Wdl_type() IWdl_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWdl_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWdl_typeContext)
}

func (s *Bound_declsContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *Bound_declsContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserEQUAL, 0)
}

func (s *Bound_declsContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Bound_declsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bound_declsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bound_declsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterBound_decls(s)
	}
}

func (s *Bound_declsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitBound_decls(s)
	}
}

func (p *WdlV1_1Parser) Bound_decls() (localctx IBound_declsContext) {
	localctx = NewBound_declsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, WdlV1_1ParserRULE_bound_decls)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(166)
		p.Wdl_type()
	}
	{
		p.SetState(167)
		p.Match(WdlV1_1ParserIdentifier)
	}
	{
		p.SetState(168)
		p.Match(WdlV1_1ParserEQUAL)
	}
	{
		p.SetState(169)
		p.Expr()
	}

	return localctx
}

// IAny_declsContext is an interface to support dynamic dispatch.
type IAny_declsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAny_declsContext differentiates from other interfaces.
	IsAny_declsContext()
}

type Any_declsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAny_declsContext() *Any_declsContext {
	var p = new(Any_declsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_any_decls
	return p
}

func (*Any_declsContext) IsAny_declsContext() {}

func NewAny_declsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Any_declsContext {
	var p = new(Any_declsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_any_decls

	return p
}

func (s *Any_declsContext) GetParser() antlr.Parser { return s.parser }

func (s *Any_declsContext) Unbound_decls() IUnbound_declsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnbound_declsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnbound_declsContext)
}

func (s *Any_declsContext) Bound_decls() IBound_declsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBound_declsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBound_declsContext)
}

func (s *Any_declsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Any_declsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Any_declsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterAny_decls(s)
	}
}

func (s *Any_declsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitAny_decls(s)
	}
}

func (p *WdlV1_1Parser) Any_decls() (localctx IAny_declsContext) {
	localctx = NewAny_declsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, WdlV1_1ParserRULE_any_decls)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(173)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(171)
			p.Unbound_decls()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(172)
			p.Bound_decls()
		}

	}

	return localctx
}

// INumberContext is an interface to support dynamic dispatch.
type INumberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNumberContext differentiates from other interfaces.
	IsNumberContext()
}

type NumberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumberContext() *NumberContext {
	var p = new(NumberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_number
	return p
}

func (*NumberContext) IsNumberContext() {}

func NewNumberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumberContext {
	var p = new(NumberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_number

	return p
}

func (s *NumberContext) GetParser() antlr.Parser { return s.parser }

func (s *NumberContext) IntLiteral() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIntLiteral, 0)
}

func (s *NumberContext) FloatLiteral() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserFloatLiteral, 0)
}

func (s *NumberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NumberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterNumber(s)
	}
}

func (s *NumberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitNumber(s)
	}
}

func (p *WdlV1_1Parser) Number() (localctx INumberContext) {
	localctx = NewNumberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, WdlV1_1ParserRULE_number)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(175)
		_la = p.GetTokenStream().LA(1)

		if !(_la == WdlV1_1ParserIntLiteral || _la == WdlV1_1ParserFloatLiteral) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IExpression_placeholder_optionContext is an interface to support dynamic dispatch.
type IExpression_placeholder_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpression_placeholder_optionContext differentiates from other interfaces.
	IsExpression_placeholder_optionContext()
}

type Expression_placeholder_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_placeholder_optionContext() *Expression_placeholder_optionContext {
	var p = new(Expression_placeholder_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_expression_placeholder_option
	return p
}

func (*Expression_placeholder_optionContext) IsExpression_placeholder_optionContext() {}

func NewExpression_placeholder_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_placeholder_optionContext {
	var p = new(Expression_placeholder_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_expression_placeholder_option

	return p
}

func (s *Expression_placeholder_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_placeholder_optionContext) BoolLiteral() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserBoolLiteral, 0)
}

func (s *Expression_placeholder_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserEQUAL, 0)
}

func (s *Expression_placeholder_optionContext) R_string() IR_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_stringContext)
}

func (s *Expression_placeholder_optionContext) DEFAULTEQUAL() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserDEFAULTEQUAL, 0)
}

func (s *Expression_placeholder_optionContext) Number() INumberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumberContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *Expression_placeholder_optionContext) SEPEQUAL() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserSEPEQUAL, 0)
}

func (s *Expression_placeholder_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_placeholder_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expression_placeholder_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterExpression_placeholder_option(s)
	}
}

func (s *Expression_placeholder_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitExpression_placeholder_option(s)
	}
}

func (p *WdlV1_1Parser) Expression_placeholder_option() (localctx IExpression_placeholder_optionContext) {
	localctx = NewExpression_placeholder_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, WdlV1_1ParserRULE_expression_placeholder_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(187)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case WdlV1_1ParserBoolLiteral:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(177)
			p.Match(WdlV1_1ParserBoolLiteral)
		}
		{
			p.SetState(178)
			p.Match(WdlV1_1ParserEQUAL)
		}
		{
			p.SetState(179)
			p.R_string()
		}

	case WdlV1_1ParserDEFAULTEQUAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(180)
			p.Match(WdlV1_1ParserDEFAULTEQUAL)
		}
		p.SetState(183)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case WdlV1_1ParserSQUOTE, WdlV1_1ParserDQUOTE:
			{
				p.SetState(181)
				p.R_string()
			}

		case WdlV1_1ParserIntLiteral, WdlV1_1ParserFloatLiteral:
			{
				p.SetState(182)
				p.Number()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case WdlV1_1ParserSEPEQUAL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(185)
			p.Match(WdlV1_1ParserSEPEQUAL)
		}
		{
			p.SetState(186)
			p.R_string()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IString_partContext is an interface to support dynamic dispatch.
type IString_partContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsString_partContext differentiates from other interfaces.
	IsString_partContext()
}

type String_partContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyString_partContext() *String_partContext {
	var p = new(String_partContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_string_part
	return p
}

func (*String_partContext) IsString_partContext() {}

func NewString_partContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *String_partContext {
	var p = new(String_partContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_string_part

	return p
}

func (s *String_partContext) GetParser() antlr.Parser { return s.parser }

func (s *String_partContext) AllStringPart() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserStringPart)
}

func (s *String_partContext) StringPart(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserStringPart, i)
}

func (s *String_partContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *String_partContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *String_partContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterString_part(s)
	}
}

func (s *String_partContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitString_part(s)
	}
}

func (p *WdlV1_1Parser) String_part() (localctx IString_partContext) {
	localctx = NewString_partContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, WdlV1_1ParserRULE_string_part)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(192)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == WdlV1_1ParserStringPart {
		{
			p.SetState(189)
			p.Match(WdlV1_1ParserStringPart)
		}

		p.SetState(194)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IString_expr_partContext is an interface to support dynamic dispatch.
type IString_expr_partContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsString_expr_partContext differentiates from other interfaces.
	IsString_expr_partContext()
}

type String_expr_partContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyString_expr_partContext() *String_expr_partContext {
	var p = new(String_expr_partContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_string_expr_part
	return p
}

func (*String_expr_partContext) IsString_expr_partContext() {}

func NewString_expr_partContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *String_expr_partContext {
	var p = new(String_expr_partContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_string_expr_part

	return p
}

func (s *String_expr_partContext) GetParser() antlr.Parser { return s.parser }

func (s *String_expr_partContext) StringCommandStart() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserStringCommandStart, 0)
}

func (s *String_expr_partContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *String_expr_partContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACE, 0)
}

func (s *String_expr_partContext) AllExpression_placeholder_option() []IExpression_placeholder_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpression_placeholder_optionContext)(nil)).Elem())
	var tst = make([]IExpression_placeholder_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpression_placeholder_optionContext)
		}
	}

	return tst
}

func (s *String_expr_partContext) Expression_placeholder_option(i int) IExpression_placeholder_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_placeholder_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpression_placeholder_optionContext)
}

func (s *String_expr_partContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *String_expr_partContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *String_expr_partContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterString_expr_part(s)
	}
}

func (s *String_expr_partContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitString_expr_part(s)
	}
}

func (p *WdlV1_1Parser) String_expr_part() (localctx IString_expr_partContext) {
	localctx = NewString_expr_partContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, WdlV1_1ParserRULE_string_expr_part)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(195)
		p.Match(WdlV1_1ParserStringCommandStart)
	}
	p.SetState(199)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(196)
				p.Expression_placeholder_option()
			}

		}
		p.SetState(201)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext())
	}
	{
		p.SetState(202)
		p.Expr()
	}
	{
		p.SetState(203)
		p.Match(WdlV1_1ParserRBRACE)
	}

	return localctx
}

// IString_expr_with_string_partContext is an interface to support dynamic dispatch.
type IString_expr_with_string_partContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsString_expr_with_string_partContext differentiates from other interfaces.
	IsString_expr_with_string_partContext()
}

type String_expr_with_string_partContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyString_expr_with_string_partContext() *String_expr_with_string_partContext {
	var p = new(String_expr_with_string_partContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_string_expr_with_string_part
	return p
}

func (*String_expr_with_string_partContext) IsString_expr_with_string_partContext() {}

func NewString_expr_with_string_partContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *String_expr_with_string_partContext {
	var p = new(String_expr_with_string_partContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_string_expr_with_string_part

	return p
}

func (s *String_expr_with_string_partContext) GetParser() antlr.Parser { return s.parser }

func (s *String_expr_with_string_partContext) String_expr_part() IString_expr_partContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_expr_partContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_expr_partContext)
}

func (s *String_expr_with_string_partContext) String_part() IString_partContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_partContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_partContext)
}

func (s *String_expr_with_string_partContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *String_expr_with_string_partContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *String_expr_with_string_partContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterString_expr_with_string_part(s)
	}
}

func (s *String_expr_with_string_partContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitString_expr_with_string_part(s)
	}
}

func (p *WdlV1_1Parser) String_expr_with_string_part() (localctx IString_expr_with_string_partContext) {
	localctx = NewString_expr_with_string_partContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, WdlV1_1ParserRULE_string_expr_with_string_part)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(205)
		p.String_expr_part()
	}
	{
		p.SetState(206)
		p.String_part()
	}

	return localctx
}

// IR_stringContext is an interface to support dynamic dispatch.
type IR_stringContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsR_stringContext differentiates from other interfaces.
	IsR_stringContext()
}

type R_stringContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyR_stringContext() *R_stringContext {
	var p = new(R_stringContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_r_string
	return p
}

func (*R_stringContext) IsR_stringContext() {}

func NewR_stringContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *R_stringContext {
	var p = new(R_stringContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_r_string

	return p
}

func (s *R_stringContext) GetParser() antlr.Parser { return s.parser }

func (s *R_stringContext) AllDQUOTE() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserDQUOTE)
}

func (s *R_stringContext) DQUOTE(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserDQUOTE, i)
}

func (s *R_stringContext) String_part() IString_partContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_partContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_partContext)
}

func (s *R_stringContext) AllString_expr_with_string_part() []IString_expr_with_string_partContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IString_expr_with_string_partContext)(nil)).Elem())
	var tst = make([]IString_expr_with_string_partContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IString_expr_with_string_partContext)
		}
	}

	return tst
}

func (s *R_stringContext) String_expr_with_string_part(i int) IString_expr_with_string_partContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_expr_with_string_partContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IString_expr_with_string_partContext)
}

func (s *R_stringContext) AllSQUOTE() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserSQUOTE)
}

func (s *R_stringContext) SQUOTE(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserSQUOTE, i)
}

func (s *R_stringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *R_stringContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *R_stringContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterR_string(s)
	}
}

func (s *R_stringContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitR_string(s)
	}
}

func (p *WdlV1_1Parser) R_string() (localctx IR_stringContext) {
	localctx = NewR_stringContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, WdlV1_1ParserRULE_r_string)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(228)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case WdlV1_1ParserDQUOTE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(208)
			p.Match(WdlV1_1ParserDQUOTE)
		}
		{
			p.SetState(209)
			p.String_part()
		}
		p.SetState(213)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == WdlV1_1ParserStringCommandStart {
			{
				p.SetState(210)
				p.String_expr_with_string_part()
			}

			p.SetState(215)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(216)
			p.Match(WdlV1_1ParserDQUOTE)
		}

	case WdlV1_1ParserSQUOTE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(218)
			p.Match(WdlV1_1ParserSQUOTE)
		}
		{
			p.SetState(219)
			p.String_part()
		}
		p.SetState(223)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == WdlV1_1ParserStringCommandStart {
			{
				p.SetState(220)
				p.String_expr_with_string_part()
			}

			p.SetState(225)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(226)
			p.Match(WdlV1_1ParserSQUOTE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPrimitive_literalContext is an interface to support dynamic dispatch.
type IPrimitive_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimitive_literalContext differentiates from other interfaces.
	IsPrimitive_literalContext()
}

type Primitive_literalContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimitive_literalContext() *Primitive_literalContext {
	var p = new(Primitive_literalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_primitive_literal
	return p
}

func (*Primitive_literalContext) IsPrimitive_literalContext() {}

func NewPrimitive_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Primitive_literalContext {
	var p = new(Primitive_literalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_primitive_literal

	return p
}

func (s *Primitive_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Primitive_literalContext) BoolLiteral() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserBoolLiteral, 0)
}

func (s *Primitive_literalContext) Number() INumberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumberContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *Primitive_literalContext) R_string() IR_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_stringContext)
}

func (s *Primitive_literalContext) NONELITERAL() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserNONELITERAL, 0)
}

func (s *Primitive_literalContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *Primitive_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Primitive_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Primitive_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterPrimitive_literal(s)
	}
}

func (s *Primitive_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitPrimitive_literal(s)
	}
}

func (p *WdlV1_1Parser) Primitive_literal() (localctx IPrimitive_literalContext) {
	localctx = NewPrimitive_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, WdlV1_1ParserRULE_primitive_literal)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(235)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case WdlV1_1ParserBoolLiteral:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(230)
			p.Match(WdlV1_1ParserBoolLiteral)
		}

	case WdlV1_1ParserIntLiteral, WdlV1_1ParserFloatLiteral:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(231)
			p.Number()
		}

	case WdlV1_1ParserSQUOTE, WdlV1_1ParserDQUOTE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(232)
			p.R_string()
		}

	case WdlV1_1ParserNONELITERAL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(233)
			p.Match(WdlV1_1ParserNONELITERAL)
		}

	case WdlV1_1ParserIdentifier:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(234)
			p.Match(WdlV1_1ParserIdentifier)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExprContext is an interface to support dynamic dispatch.
type IExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExprContext differentiates from other interfaces.
	IsExprContext()
}

type ExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprContext() *ExprContext {
	var p = new(ExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_expr
	return p
}

func (*ExprContext) IsExprContext() {}

func NewExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprContext {
	var p = new(ExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_expr

	return p
}

func (s *ExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprContext) Expr_infix() IExpr_infixContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infixContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infixContext)
}

func (s *ExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterExpr(s)
	}
}

func (s *ExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitExpr(s)
	}
}

func (p *WdlV1_1Parser) Expr() (localctx IExprContext) {
	localctx = NewExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, WdlV1_1ParserRULE_expr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(237)
		p.Expr_infix()
	}

	return localctx
}

// IExpr_infixContext is an interface to support dynamic dispatch.
type IExpr_infixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpr_infixContext differentiates from other interfaces.
	IsExpr_infixContext()
}

type Expr_infixContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpr_infixContext() *Expr_infixContext {
	var p = new(Expr_infixContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_expr_infix
	return p
}

func (*Expr_infixContext) IsExpr_infixContext() {}

func NewExpr_infixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expr_infixContext {
	var p = new(Expr_infixContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_expr_infix

	return p
}

func (s *Expr_infixContext) GetParser() antlr.Parser { return s.parser }

func (s *Expr_infixContext) CopyFrom(ctx *Expr_infixContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Expr_infixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_infixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Infix0Context struct {
	*Expr_infixContext
}

func NewInfix0Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *Infix0Context {
	var p = new(Infix0Context)

	p.Expr_infixContext = NewEmptyExpr_infixContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infixContext))

	return p
}

func (s *Infix0Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Infix0Context) Expr_infix0() IExpr_infix0Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infix0Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infix0Context)
}

func (s *Infix0Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterInfix0(s)
	}
}

func (s *Infix0Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitInfix0(s)
	}
}

func (p *WdlV1_1Parser) Expr_infix() (localctx IExpr_infixContext) {
	localctx = NewExpr_infixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, WdlV1_1ParserRULE_expr_infix)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	localctx = NewInfix0Context(p, localctx)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(239)
		p.expr_infix0(0)
	}

	return localctx
}

// IExpr_infix0Context is an interface to support dynamic dispatch.
type IExpr_infix0Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpr_infix0Context differentiates from other interfaces.
	IsExpr_infix0Context()
}

type Expr_infix0Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpr_infix0Context() *Expr_infix0Context {
	var p = new(Expr_infix0Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_expr_infix0
	return p
}

func (*Expr_infix0Context) IsExpr_infix0Context() {}

func NewExpr_infix0Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expr_infix0Context {
	var p = new(Expr_infix0Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_expr_infix0

	return p
}

func (s *Expr_infix0Context) GetParser() antlr.Parser { return s.parser }

func (s *Expr_infix0Context) CopyFrom(ctx *Expr_infix0Context) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Expr_infix0Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_infix0Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Infix1Context struct {
	*Expr_infix0Context
}

func NewInfix1Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *Infix1Context {
	var p = new(Infix1Context)

	p.Expr_infix0Context = NewEmptyExpr_infix0Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix0Context))

	return p
}

func (s *Infix1Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Infix1Context) Expr_infix1() IExpr_infix1Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infix1Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infix1Context)
}

func (s *Infix1Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterInfix1(s)
	}
}

func (s *Infix1Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitInfix1(s)
	}
}

type LorContext struct {
	*Expr_infix0Context
}

func NewLorContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LorContext {
	var p = new(LorContext)

	p.Expr_infix0Context = NewEmptyExpr_infix0Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix0Context))

	return p
}

func (s *LorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LorContext) Expr_infix0() IExpr_infix0Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infix0Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infix0Context)
}

func (s *LorContext) OR() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserOR, 0)
}

func (s *LorContext) Expr_infix1() IExpr_infix1Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infix1Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infix1Context)
}

func (s *LorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterLor(s)
	}
}

func (s *LorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitLor(s)
	}
}

func (p *WdlV1_1Parser) Expr_infix0() (localctx IExpr_infix0Context) {
	return p.expr_infix0(0)
}

func (p *WdlV1_1Parser) expr_infix0(_p int) (localctx IExpr_infix0Context) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpr_infix0Context(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpr_infix0Context = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 34
	p.EnterRecursionRule(localctx, 34, WdlV1_1ParserRULE_expr_infix0, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	localctx = NewInfix1Context(p, localctx)
	p.SetParserRuleContext(localctx)
	_prevctx = localctx

	{
		p.SetState(242)
		p.expr_infix1(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(249)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewLorContext(p, NewExpr_infix0Context(p, _parentctx, _parentState))
			p.PushNewRecursionContext(localctx, _startState, WdlV1_1ParserRULE_expr_infix0)
			p.SetState(244)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(245)
				p.Match(WdlV1_1ParserOR)
			}
			{
				p.SetState(246)
				p.expr_infix1(0)
			}

		}
		p.SetState(251)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext())
	}

	return localctx
}

// IExpr_infix1Context is an interface to support dynamic dispatch.
type IExpr_infix1Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpr_infix1Context differentiates from other interfaces.
	IsExpr_infix1Context()
}

type Expr_infix1Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpr_infix1Context() *Expr_infix1Context {
	var p = new(Expr_infix1Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_expr_infix1
	return p
}

func (*Expr_infix1Context) IsExpr_infix1Context() {}

func NewExpr_infix1Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expr_infix1Context {
	var p = new(Expr_infix1Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_expr_infix1

	return p
}

func (s *Expr_infix1Context) GetParser() antlr.Parser { return s.parser }

func (s *Expr_infix1Context) CopyFrom(ctx *Expr_infix1Context) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Expr_infix1Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_infix1Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Infix2Context struct {
	*Expr_infix1Context
}

func NewInfix2Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *Infix2Context {
	var p = new(Infix2Context)

	p.Expr_infix1Context = NewEmptyExpr_infix1Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix1Context))

	return p
}

func (s *Infix2Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Infix2Context) Expr_infix2() IExpr_infix2Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infix2Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infix2Context)
}

func (s *Infix2Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterInfix2(s)
	}
}

func (s *Infix2Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitInfix2(s)
	}
}

type LandContext struct {
	*Expr_infix1Context
}

func NewLandContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LandContext {
	var p = new(LandContext)

	p.Expr_infix1Context = NewEmptyExpr_infix1Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix1Context))

	return p
}

func (s *LandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LandContext) Expr_infix1() IExpr_infix1Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infix1Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infix1Context)
}

func (s *LandContext) AND() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserAND, 0)
}

func (s *LandContext) Expr_infix2() IExpr_infix2Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infix2Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infix2Context)
}

func (s *LandContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterLand(s)
	}
}

func (s *LandContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitLand(s)
	}
}

func (p *WdlV1_1Parser) Expr_infix1() (localctx IExpr_infix1Context) {
	return p.expr_infix1(0)
}

func (p *WdlV1_1Parser) expr_infix1(_p int) (localctx IExpr_infix1Context) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpr_infix1Context(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpr_infix1Context = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 36
	p.EnterRecursionRule(localctx, 36, WdlV1_1ParserRULE_expr_infix1, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	localctx = NewInfix2Context(p, localctx)
	p.SetParserRuleContext(localctx)
	_prevctx = localctx

	{
		p.SetState(253)
		p.expr_infix2(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(260)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewLandContext(p, NewExpr_infix1Context(p, _parentctx, _parentState))
			p.PushNewRecursionContext(localctx, _startState, WdlV1_1ParserRULE_expr_infix1)
			p.SetState(255)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(256)
				p.Match(WdlV1_1ParserAND)
			}
			{
				p.SetState(257)
				p.expr_infix2(0)
			}

		}
		p.SetState(262)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext())
	}

	return localctx
}

// IExpr_infix2Context is an interface to support dynamic dispatch.
type IExpr_infix2Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpr_infix2Context differentiates from other interfaces.
	IsExpr_infix2Context()
}

type Expr_infix2Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpr_infix2Context() *Expr_infix2Context {
	var p = new(Expr_infix2Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_expr_infix2
	return p
}

func (*Expr_infix2Context) IsExpr_infix2Context() {}

func NewExpr_infix2Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expr_infix2Context {
	var p = new(Expr_infix2Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_expr_infix2

	return p
}

func (s *Expr_infix2Context) GetParser() antlr.Parser { return s.parser }

func (s *Expr_infix2Context) CopyFrom(ctx *Expr_infix2Context) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Expr_infix2Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_infix2Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type EqeqContext struct {
	*Expr_infix2Context
}

func NewEqeqContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *EqeqContext {
	var p = new(EqeqContext)

	p.Expr_infix2Context = NewEmptyExpr_infix2Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix2Context))

	return p
}

func (s *EqeqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EqeqContext) Expr_infix2() IExpr_infix2Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infix2Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infix2Context)
}

func (s *EqeqContext) EQUALITY() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserEQUALITY, 0)
}

func (s *EqeqContext) Expr_infix3() IExpr_infix3Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infix3Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infix3Context)
}

func (s *EqeqContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterEqeq(s)
	}
}

func (s *EqeqContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitEqeq(s)
	}
}

type LtContext struct {
	*Expr_infix2Context
}

func NewLtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LtContext {
	var p = new(LtContext)

	p.Expr_infix2Context = NewEmptyExpr_infix2Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix2Context))

	return p
}

func (s *LtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LtContext) Expr_infix2() IExpr_infix2Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infix2Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infix2Context)
}

func (s *LtContext) LT() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLT, 0)
}

func (s *LtContext) Expr_infix3() IExpr_infix3Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infix3Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infix3Context)
}

func (s *LtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterLt(s)
	}
}

func (s *LtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitLt(s)
	}
}

type Infix3Context struct {
	*Expr_infix2Context
}

func NewInfix3Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *Infix3Context {
	var p = new(Infix3Context)

	p.Expr_infix2Context = NewEmptyExpr_infix2Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix2Context))

	return p
}

func (s *Infix3Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Infix3Context) Expr_infix3() IExpr_infix3Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infix3Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infix3Context)
}

func (s *Infix3Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterInfix3(s)
	}
}

func (s *Infix3Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitInfix3(s)
	}
}

type GteContext struct {
	*Expr_infix2Context
}

func NewGteContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GteContext {
	var p = new(GteContext)

	p.Expr_infix2Context = NewEmptyExpr_infix2Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix2Context))

	return p
}

func (s *GteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GteContext) Expr_infix2() IExpr_infix2Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infix2Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infix2Context)
}

func (s *GteContext) GTE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserGTE, 0)
}

func (s *GteContext) Expr_infix3() IExpr_infix3Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infix3Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infix3Context)
}

func (s *GteContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterGte(s)
	}
}

func (s *GteContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitGte(s)
	}
}

type NeqContext struct {
	*Expr_infix2Context
}

func NewNeqContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NeqContext {
	var p = new(NeqContext)

	p.Expr_infix2Context = NewEmptyExpr_infix2Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix2Context))

	return p
}

func (s *NeqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NeqContext) Expr_infix2() IExpr_infix2Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infix2Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infix2Context)
}

func (s *NeqContext) NOTEQUAL() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserNOTEQUAL, 0)
}

func (s *NeqContext) Expr_infix3() IExpr_infix3Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infix3Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infix3Context)
}

func (s *NeqContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterNeq(s)
	}
}

func (s *NeqContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitNeq(s)
	}
}

type LteContext struct {
	*Expr_infix2Context
}

func NewLteContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LteContext {
	var p = new(LteContext)

	p.Expr_infix2Context = NewEmptyExpr_infix2Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix2Context))

	return p
}

func (s *LteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LteContext) Expr_infix2() IExpr_infix2Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infix2Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infix2Context)
}

func (s *LteContext) LTE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLTE, 0)
}

func (s *LteContext) Expr_infix3() IExpr_infix3Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infix3Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infix3Context)
}

func (s *LteContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterLte(s)
	}
}

func (s *LteContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitLte(s)
	}
}

type GtContext struct {
	*Expr_infix2Context
}

func NewGtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GtContext {
	var p = new(GtContext)

	p.Expr_infix2Context = NewEmptyExpr_infix2Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix2Context))

	return p
}

func (s *GtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GtContext) Expr_infix2() IExpr_infix2Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infix2Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infix2Context)
}

func (s *GtContext) GT() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserGT, 0)
}

func (s *GtContext) Expr_infix3() IExpr_infix3Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infix3Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infix3Context)
}

func (s *GtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterGt(s)
	}
}

func (s *GtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitGt(s)
	}
}

func (p *WdlV1_1Parser) Expr_infix2() (localctx IExpr_infix2Context) {
	return p.expr_infix2(0)
}

func (p *WdlV1_1Parser) expr_infix2(_p int) (localctx IExpr_infix2Context) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpr_infix2Context(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpr_infix2Context = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 38
	p.EnterRecursionRule(localctx, 38, WdlV1_1ParserRULE_expr_infix2, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	localctx = NewInfix3Context(p, localctx)
	p.SetParserRuleContext(localctx)
	_prevctx = localctx

	{
		p.SetState(264)
		p.expr_infix3(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(286)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(284)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 14, p.GetParserRuleContext()) {
			case 1:
				localctx = NewEqeqContext(p, NewExpr_infix2Context(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, WdlV1_1ParserRULE_expr_infix2)
				p.SetState(266)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(267)
					p.Match(WdlV1_1ParserEQUALITY)
				}
				{
					p.SetState(268)
					p.expr_infix3(0)
				}

			case 2:
				localctx = NewNeqContext(p, NewExpr_infix2Context(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, WdlV1_1ParserRULE_expr_infix2)
				p.SetState(269)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(270)
					p.Match(WdlV1_1ParserNOTEQUAL)
				}
				{
					p.SetState(271)
					p.expr_infix3(0)
				}

			case 3:
				localctx = NewLteContext(p, NewExpr_infix2Context(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, WdlV1_1ParserRULE_expr_infix2)
				p.SetState(272)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(273)
					p.Match(WdlV1_1ParserLTE)
				}
				{
					p.SetState(274)
					p.expr_infix3(0)
				}

			case 4:
				localctx = NewGteContext(p, NewExpr_infix2Context(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, WdlV1_1ParserRULE_expr_infix2)
				p.SetState(275)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(276)
					p.Match(WdlV1_1ParserGTE)
				}
				{
					p.SetState(277)
					p.expr_infix3(0)
				}

			case 5:
				localctx = NewLtContext(p, NewExpr_infix2Context(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, WdlV1_1ParserRULE_expr_infix2)
				p.SetState(278)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(279)
					p.Match(WdlV1_1ParserLT)
				}
				{
					p.SetState(280)
					p.expr_infix3(0)
				}

			case 6:
				localctx = NewGtContext(p, NewExpr_infix2Context(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, WdlV1_1ParserRULE_expr_infix2)
				p.SetState(281)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(282)
					p.Match(WdlV1_1ParserGT)
				}
				{
					p.SetState(283)
					p.expr_infix3(0)
				}

			}

		}
		p.SetState(288)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext())
	}

	return localctx
}

// IExpr_infix3Context is an interface to support dynamic dispatch.
type IExpr_infix3Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpr_infix3Context differentiates from other interfaces.
	IsExpr_infix3Context()
}

type Expr_infix3Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpr_infix3Context() *Expr_infix3Context {
	var p = new(Expr_infix3Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_expr_infix3
	return p
}

func (*Expr_infix3Context) IsExpr_infix3Context() {}

func NewExpr_infix3Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expr_infix3Context {
	var p = new(Expr_infix3Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_expr_infix3

	return p
}

func (s *Expr_infix3Context) GetParser() antlr.Parser { return s.parser }

func (s *Expr_infix3Context) CopyFrom(ctx *Expr_infix3Context) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Expr_infix3Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_infix3Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type AddContext struct {
	*Expr_infix3Context
}

func NewAddContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AddContext {
	var p = new(AddContext)

	p.Expr_infix3Context = NewEmptyExpr_infix3Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix3Context))

	return p
}

func (s *AddContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AddContext) Expr_infix3() IExpr_infix3Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infix3Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infix3Context)
}

func (s *AddContext) PLUS() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserPLUS, 0)
}

func (s *AddContext) Expr_infix4() IExpr_infix4Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infix4Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infix4Context)
}

func (s *AddContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterAdd(s)
	}
}

func (s *AddContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitAdd(s)
	}
}

type SubContext struct {
	*Expr_infix3Context
}

func NewSubContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SubContext {
	var p = new(SubContext)

	p.Expr_infix3Context = NewEmptyExpr_infix3Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix3Context))

	return p
}

func (s *SubContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubContext) Expr_infix3() IExpr_infix3Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infix3Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infix3Context)
}

func (s *SubContext) MINUS() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMINUS, 0)
}

func (s *SubContext) Expr_infix4() IExpr_infix4Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infix4Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infix4Context)
}

func (s *SubContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterSub(s)
	}
}

func (s *SubContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitSub(s)
	}
}

type Infix4Context struct {
	*Expr_infix3Context
}

func NewInfix4Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *Infix4Context {
	var p = new(Infix4Context)

	p.Expr_infix3Context = NewEmptyExpr_infix3Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix3Context))

	return p
}

func (s *Infix4Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Infix4Context) Expr_infix4() IExpr_infix4Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infix4Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infix4Context)
}

func (s *Infix4Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterInfix4(s)
	}
}

func (s *Infix4Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitInfix4(s)
	}
}

func (p *WdlV1_1Parser) Expr_infix3() (localctx IExpr_infix3Context) {
	return p.expr_infix3(0)
}

func (p *WdlV1_1Parser) expr_infix3(_p int) (localctx IExpr_infix3Context) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpr_infix3Context(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpr_infix3Context = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 40
	p.EnterRecursionRule(localctx, 40, WdlV1_1ParserRULE_expr_infix3, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	localctx = NewInfix4Context(p, localctx)
	p.SetParserRuleContext(localctx)
	_prevctx = localctx

	{
		p.SetState(290)
		p.expr_infix4(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(300)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(298)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 16, p.GetParserRuleContext()) {
			case 1:
				localctx = NewAddContext(p, NewExpr_infix3Context(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, WdlV1_1ParserRULE_expr_infix3)
				p.SetState(292)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(293)
					p.Match(WdlV1_1ParserPLUS)
				}
				{
					p.SetState(294)
					p.expr_infix4(0)
				}

			case 2:
				localctx = NewSubContext(p, NewExpr_infix3Context(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, WdlV1_1ParserRULE_expr_infix3)
				p.SetState(295)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(296)
					p.Match(WdlV1_1ParserMINUS)
				}
				{
					p.SetState(297)
					p.expr_infix4(0)
				}

			}

		}
		p.SetState(302)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext())
	}

	return localctx
}

// IExpr_infix4Context is an interface to support dynamic dispatch.
type IExpr_infix4Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpr_infix4Context differentiates from other interfaces.
	IsExpr_infix4Context()
}

type Expr_infix4Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpr_infix4Context() *Expr_infix4Context {
	var p = new(Expr_infix4Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_expr_infix4
	return p
}

func (*Expr_infix4Context) IsExpr_infix4Context() {}

func NewExpr_infix4Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expr_infix4Context {
	var p = new(Expr_infix4Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_expr_infix4

	return p
}

func (s *Expr_infix4Context) GetParser() antlr.Parser { return s.parser }

func (s *Expr_infix4Context) CopyFrom(ctx *Expr_infix4Context) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Expr_infix4Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_infix4Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ModContext struct {
	*Expr_infix4Context
}

func NewModContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ModContext {
	var p = new(ModContext)

	p.Expr_infix4Context = NewEmptyExpr_infix4Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix4Context))

	return p
}

func (s *ModContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModContext) Expr_infix4() IExpr_infix4Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infix4Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infix4Context)
}

func (s *ModContext) MOD() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMOD, 0)
}

func (s *ModContext) Expr_infix5() IExpr_infix5Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infix5Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infix5Context)
}

func (s *ModContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterMod(s)
	}
}

func (s *ModContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitMod(s)
	}
}

type MulContext struct {
	*Expr_infix4Context
}

func NewMulContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MulContext {
	var p = new(MulContext)

	p.Expr_infix4Context = NewEmptyExpr_infix4Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix4Context))

	return p
}

func (s *MulContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MulContext) Expr_infix4() IExpr_infix4Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infix4Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infix4Context)
}

func (s *MulContext) STAR() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserSTAR, 0)
}

func (s *MulContext) Expr_infix5() IExpr_infix5Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infix5Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infix5Context)
}

func (s *MulContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterMul(s)
	}
}

func (s *MulContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitMul(s)
	}
}

type DivideContext struct {
	*Expr_infix4Context
}

func NewDivideContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DivideContext {
	var p = new(DivideContext)

	p.Expr_infix4Context = NewEmptyExpr_infix4Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix4Context))

	return p
}

func (s *DivideContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DivideContext) Expr_infix4() IExpr_infix4Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infix4Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infix4Context)
}

func (s *DivideContext) DIVIDE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserDIVIDE, 0)
}

func (s *DivideContext) Expr_infix5() IExpr_infix5Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infix5Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infix5Context)
}

func (s *DivideContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterDivide(s)
	}
}

func (s *DivideContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitDivide(s)
	}
}

type Infix5Context struct {
	*Expr_infix4Context
}

func NewInfix5Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *Infix5Context {
	var p = new(Infix5Context)

	p.Expr_infix4Context = NewEmptyExpr_infix4Context()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_infix4Context))

	return p
}

func (s *Infix5Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Infix5Context) Expr_infix5() IExpr_infix5Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_infix5Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_infix5Context)
}

func (s *Infix5Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterInfix5(s)
	}
}

func (s *Infix5Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitInfix5(s)
	}
}

func (p *WdlV1_1Parser) Expr_infix4() (localctx IExpr_infix4Context) {
	return p.expr_infix4(0)
}

func (p *WdlV1_1Parser) expr_infix4(_p int) (localctx IExpr_infix4Context) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpr_infix4Context(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpr_infix4Context = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 42
	p.EnterRecursionRule(localctx, 42, WdlV1_1ParserRULE_expr_infix4, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	localctx = NewInfix5Context(p, localctx)
	p.SetParserRuleContext(localctx)
	_prevctx = localctx

	{
		p.SetState(304)
		p.Expr_infix5()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(317)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 19, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(315)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 18, p.GetParserRuleContext()) {
			case 1:
				localctx = NewMulContext(p, NewExpr_infix4Context(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, WdlV1_1ParserRULE_expr_infix4)
				p.SetState(306)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(307)
					p.Match(WdlV1_1ParserSTAR)
				}
				{
					p.SetState(308)
					p.Expr_infix5()
				}

			case 2:
				localctx = NewDivideContext(p, NewExpr_infix4Context(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, WdlV1_1ParserRULE_expr_infix4)
				p.SetState(309)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(310)
					p.Match(WdlV1_1ParserDIVIDE)
				}
				{
					p.SetState(311)
					p.Expr_infix5()
				}

			case 3:
				localctx = NewModContext(p, NewExpr_infix4Context(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, WdlV1_1ParserRULE_expr_infix4)
				p.SetState(312)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(313)
					p.Match(WdlV1_1ParserMOD)
				}
				{
					p.SetState(314)
					p.Expr_infix5()
				}

			}

		}
		p.SetState(319)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 19, p.GetParserRuleContext())
	}

	return localctx
}

// IExpr_infix5Context is an interface to support dynamic dispatch.
type IExpr_infix5Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpr_infix5Context differentiates from other interfaces.
	IsExpr_infix5Context()
}

type Expr_infix5Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpr_infix5Context() *Expr_infix5Context {
	var p = new(Expr_infix5Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_expr_infix5
	return p
}

func (*Expr_infix5Context) IsExpr_infix5Context() {}

func NewExpr_infix5Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expr_infix5Context {
	var p = new(Expr_infix5Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_expr_infix5

	return p
}

func (s *Expr_infix5Context) GetParser() antlr.Parser { return s.parser }

func (s *Expr_infix5Context) Expr_core() IExpr_coreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_coreContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_coreContext)
}

func (s *Expr_infix5Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_infix5Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expr_infix5Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterExpr_infix5(s)
	}
}

func (s *Expr_infix5Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitExpr_infix5(s)
	}
}

func (p *WdlV1_1Parser) Expr_infix5() (localctx IExpr_infix5Context) {
	localctx = NewExpr_infix5Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, WdlV1_1ParserRULE_expr_infix5)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(320)
		p.expr_core(0)
	}

	return localctx
}

// IMemberContext is an interface to support dynamic dispatch.
type IMemberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMemberContext differentiates from other interfaces.
	IsMemberContext()
}

type MemberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMemberContext() *MemberContext {
	var p = new(MemberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_member
	return p
}

func (*MemberContext) IsMemberContext() {}

func NewMemberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemberContext {
	var p = new(MemberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_member

	return p
}

func (s *MemberContext) GetParser() antlr.Parser { return s.parser }

func (s *MemberContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *MemberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MemberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterMember(s)
	}
}

func (s *MemberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitMember(s)
	}
}

func (p *WdlV1_1Parser) Member() (localctx IMemberContext) {
	localctx = NewMemberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, WdlV1_1ParserRULE_member)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(322)
		p.Match(WdlV1_1ParserIdentifier)
	}

	return localctx
}

// IExpr_coreContext is an interface to support dynamic dispatch.
type IExpr_coreContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpr_coreContext differentiates from other interfaces.
	IsExpr_coreContext()
}

type Expr_coreContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpr_coreContext() *Expr_coreContext {
	var p = new(Expr_coreContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_expr_core
	return p
}

func (*Expr_coreContext) IsExpr_coreContext() {}

func NewExpr_coreContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expr_coreContext {
	var p = new(Expr_coreContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_expr_core

	return p
}

func (s *Expr_coreContext) GetParser() antlr.Parser { return s.parser }

func (s *Expr_coreContext) CopyFrom(ctx *Expr_coreContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Expr_coreContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_coreContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Pair_literalContext struct {
	*Expr_coreContext
}

func NewPair_literalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Pair_literalContext {
	var p = new(Pair_literalContext)

	p.Expr_coreContext = NewEmptyExpr_coreContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_coreContext))

	return p
}

func (s *Pair_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pair_literalContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLPAREN, 0)
}

func (s *Pair_literalContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Pair_literalContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Pair_literalContext) COMMA() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCOMMA, 0)
}

func (s *Pair_literalContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRPAREN, 0)
}

func (s *Pair_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterPair_literal(s)
	}
}

func (s *Pair_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitPair_literal(s)
	}
}

type UnarysignedContext struct {
	*Expr_coreContext
}

func NewUnarysignedContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UnarysignedContext {
	var p = new(UnarysignedContext)

	p.Expr_coreContext = NewEmptyExpr_coreContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_coreContext))

	return p
}

func (s *UnarysignedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnarysignedContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *UnarysignedContext) PLUS() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserPLUS, 0)
}

func (s *UnarysignedContext) MINUS() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMINUS, 0)
}

func (s *UnarysignedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterUnarysigned(s)
	}
}

func (s *UnarysignedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitUnarysigned(s)
	}
}

type ApplyContext struct {
	*Expr_coreContext
}

func NewApplyContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ApplyContext {
	var p = new(ApplyContext)

	p.Expr_coreContext = NewEmptyExpr_coreContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_coreContext))

	return p
}

func (s *ApplyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ApplyContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *ApplyContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLPAREN, 0)
}

func (s *ApplyContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRPAREN, 0)
}

func (s *ApplyContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *ApplyContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ApplyContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserCOMMA)
}

func (s *ApplyContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCOMMA, i)
}

func (s *ApplyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterApply(s)
	}
}

func (s *ApplyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitApply(s)
	}
}

type Expression_groupContext struct {
	*Expr_coreContext
}

func NewExpression_groupContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expression_groupContext {
	var p = new(Expression_groupContext)

	p.Expr_coreContext = NewEmptyExpr_coreContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_coreContext))

	return p
}

func (s *Expression_groupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_groupContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLPAREN, 0)
}

func (s *Expression_groupContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expression_groupContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRPAREN, 0)
}

func (s *Expression_groupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterExpression_group(s)
	}
}

func (s *Expression_groupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitExpression_group(s)
	}
}

type PrimitivesContext struct {
	*Expr_coreContext
}

func NewPrimitivesContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrimitivesContext {
	var p = new(PrimitivesContext)

	p.Expr_coreContext = NewEmptyExpr_coreContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_coreContext))

	return p
}

func (s *PrimitivesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimitivesContext) Primitive_literal() IPrimitive_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimitive_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimitive_literalContext)
}

func (s *PrimitivesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterPrimitives(s)
	}
}

func (s *PrimitivesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitPrimitives(s)
	}
}

type Left_nameContext struct {
	*Expr_coreContext
}

func NewLeft_nameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Left_nameContext {
	var p = new(Left_nameContext)

	p.Expr_coreContext = NewEmptyExpr_coreContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_coreContext))

	return p
}

func (s *Left_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Left_nameContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *Left_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterLeft_name(s)
	}
}

func (s *Left_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitLeft_name(s)
	}
}

type AtContext struct {
	*Expr_coreContext
}

func NewAtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AtContext {
	var p = new(AtContext)

	p.Expr_coreContext = NewEmptyExpr_coreContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_coreContext))

	return p
}

func (s *AtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AtContext) Expr_core() IExpr_coreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_coreContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_coreContext)
}

func (s *AtContext) LBRACK() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACK, 0)
}

func (s *AtContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *AtContext) RBRACK() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACK, 0)
}

func (s *AtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterAt(s)
	}
}

func (s *AtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitAt(s)
	}
}

type NegateContext struct {
	*Expr_coreContext
}

func NewNegateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NegateContext {
	var p = new(NegateContext)

	p.Expr_coreContext = NewEmptyExpr_coreContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_coreContext))

	return p
}

func (s *NegateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NegateContext) NOT() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserNOT, 0)
}

func (s *NegateContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *NegateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterNegate(s)
	}
}

func (s *NegateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitNegate(s)
	}
}

type Map_literalContext struct {
	*Expr_coreContext
}

func NewMap_literalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Map_literalContext {
	var p = new(Map_literalContext)

	p.Expr_coreContext = NewEmptyExpr_coreContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_coreContext))

	return p
}

func (s *Map_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Map_literalContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACE, 0)
}

func (s *Map_literalContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACE, 0)
}

func (s *Map_literalContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Map_literalContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Map_literalContext) AllCOLON() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserCOLON)
}

func (s *Map_literalContext) COLON(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCOLON, i)
}

func (s *Map_literalContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserCOMMA)
}

func (s *Map_literalContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCOMMA, i)
}

func (s *Map_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterMap_literal(s)
	}
}

func (s *Map_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitMap_literal(s)
	}
}

type IfthenelseContext struct {
	*Expr_coreContext
}

func NewIfthenelseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IfthenelseContext {
	var p = new(IfthenelseContext)

	p.Expr_coreContext = NewEmptyExpr_coreContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_coreContext))

	return p
}

func (s *IfthenelseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfthenelseContext) IF() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIF, 0)
}

func (s *IfthenelseContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *IfthenelseContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IfthenelseContext) THEN() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserTHEN, 0)
}

func (s *IfthenelseContext) ELSE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserELSE, 0)
}

func (s *IfthenelseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterIfthenelse(s)
	}
}

func (s *IfthenelseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitIfthenelse(s)
	}
}

type Get_nameContext struct {
	*Expr_coreContext
}

func NewGet_nameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Get_nameContext {
	var p = new(Get_nameContext)

	p.Expr_coreContext = NewEmptyExpr_coreContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_coreContext))

	return p
}

func (s *Get_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Get_nameContext) Expr_core() IExpr_coreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpr_coreContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpr_coreContext)
}

func (s *Get_nameContext) DOT() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserDOT, 0)
}

func (s *Get_nameContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *Get_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterGet_name(s)
	}
}

func (s *Get_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitGet_name(s)
	}
}

type Object_literalContext struct {
	*Expr_coreContext
}

func NewObject_literalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Object_literalContext {
	var p = new(Object_literalContext)

	p.Expr_coreContext = NewEmptyExpr_coreContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_coreContext))

	return p
}

func (s *Object_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Object_literalContext) OBJECTLITERAL() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserOBJECTLITERAL, 0)
}

func (s *Object_literalContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACE, 0)
}

func (s *Object_literalContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACE, 0)
}

func (s *Object_literalContext) AllMember() []IMemberContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMemberContext)(nil)).Elem())
	var tst = make([]IMemberContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMemberContext)
		}
	}

	return tst
}

func (s *Object_literalContext) Member(i int) IMemberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMemberContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMemberContext)
}

func (s *Object_literalContext) AllCOLON() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserCOLON)
}

func (s *Object_literalContext) COLON(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCOLON, i)
}

func (s *Object_literalContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Object_literalContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Object_literalContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserCOMMA)
}

func (s *Object_literalContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCOMMA, i)
}

func (s *Object_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterObject_literal(s)
	}
}

func (s *Object_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitObject_literal(s)
	}
}

type Array_literalContext struct {
	*Expr_coreContext
}

func NewArray_literalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Array_literalContext {
	var p = new(Array_literalContext)

	p.Expr_coreContext = NewEmptyExpr_coreContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_coreContext))

	return p
}

func (s *Array_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_literalContext) LBRACK() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACK, 0)
}

func (s *Array_literalContext) RBRACK() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACK, 0)
}

func (s *Array_literalContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Array_literalContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Array_literalContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserCOMMA)
}

func (s *Array_literalContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCOMMA, i)
}

func (s *Array_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterArray_literal(s)
	}
}

func (s *Array_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitArray_literal(s)
	}
}

type Struct_literalContext struct {
	*Expr_coreContext
}

func NewStruct_literalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Struct_literalContext {
	var p = new(Struct_literalContext)

	p.Expr_coreContext = NewEmptyExpr_coreContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expr_coreContext))

	return p
}

func (s *Struct_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Struct_literalContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *Struct_literalContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACE, 0)
}

func (s *Struct_literalContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACE, 0)
}

func (s *Struct_literalContext) AllMember() []IMemberContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMemberContext)(nil)).Elem())
	var tst = make([]IMemberContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMemberContext)
		}
	}

	return tst
}

func (s *Struct_literalContext) Member(i int) IMemberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMemberContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMemberContext)
}

func (s *Struct_literalContext) AllCOLON() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserCOLON)
}

func (s *Struct_literalContext) COLON(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCOLON, i)
}

func (s *Struct_literalContext) AllExpr() []IExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprContext)(nil)).Elem())
	var tst = make([]IExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprContext)
		}
	}

	return tst
}

func (s *Struct_literalContext) Expr(i int) IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Struct_literalContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserCOMMA)
}

func (s *Struct_literalContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCOMMA, i)
}

func (s *Struct_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterStruct_literal(s)
	}
}

func (s *Struct_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitStruct_literal(s)
	}
}

func (p *WdlV1_1Parser) Expr_core() (localctx IExpr_coreContext) {
	return p.expr_core(0)
}

func (p *WdlV1_1Parser) expr_core(_p int) (localctx IExpr_coreContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpr_coreContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpr_coreContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 48
	p.EnterRecursionRule(localctx, 48, WdlV1_1ParserRULE_expr_core, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(453)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 35, p.GetParserRuleContext()) {
	case 1:
		localctx = NewApplyContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(325)
			p.Match(WdlV1_1ParserIdentifier)
		}
		{
			p.SetState(326)
			p.Match(WdlV1_1ParserLPAREN)
		}
		p.SetState(338)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-9)&-(0x1f+1)) == 0 && ((1<<uint((_la-9)))&((1<<(WdlV1_1ParserIF-9))|(1<<(WdlV1_1ParserOBJECTLITERAL-9))|(1<<(WdlV1_1ParserNONELITERAL-9))|(1<<(WdlV1_1ParserIntLiteral-9))|(1<<(WdlV1_1ParserFloatLiteral-9))|(1<<(WdlV1_1ParserBoolLiteral-9))|(1<<(WdlV1_1ParserLPAREN-9))|(1<<(WdlV1_1ParserLBRACE-9)))) != 0) || (((_la-42)&-(0x1f+1)) == 0 && ((1<<uint((_la-42)))&((1<<(WdlV1_1ParserLBRACK-42))|(1<<(WdlV1_1ParserPLUS-42))|(1<<(WdlV1_1ParserMINUS-42))|(1<<(WdlV1_1ParserNOT-42))|(1<<(WdlV1_1ParserSQUOTE-42))|(1<<(WdlV1_1ParserDQUOTE-42))|(1<<(WdlV1_1ParserIdentifier-42)))) != 0) {
			{
				p.SetState(327)
				p.Expr()
			}
			p.SetState(332)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 20, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(328)
						p.Match(WdlV1_1ParserCOMMA)
					}
					{
						p.SetState(329)
						p.Expr()
					}

				}
				p.SetState(334)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 20, p.GetParserRuleContext())
			}
			p.SetState(336)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == WdlV1_1ParserCOMMA {
				{
					p.SetState(335)
					p.Match(WdlV1_1ParserCOMMA)
				}

			}

		}
		{
			p.SetState(340)
			p.Match(WdlV1_1ParserRPAREN)
		}

	case 2:
		localctx = NewArray_literalContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(341)
			p.Match(WdlV1_1ParserLBRACK)
		}
		p.SetState(355)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (((_la-9)&-(0x1f+1)) == 0 && ((1<<uint((_la-9)))&((1<<(WdlV1_1ParserIF-9))|(1<<(WdlV1_1ParserOBJECTLITERAL-9))|(1<<(WdlV1_1ParserNONELITERAL-9))|(1<<(WdlV1_1ParserIntLiteral-9))|(1<<(WdlV1_1ParserFloatLiteral-9))|(1<<(WdlV1_1ParserBoolLiteral-9))|(1<<(WdlV1_1ParserLPAREN-9))|(1<<(WdlV1_1ParserLBRACE-9)))) != 0) || (((_la-42)&-(0x1f+1)) == 0 && ((1<<uint((_la-42)))&((1<<(WdlV1_1ParserLBRACK-42))|(1<<(WdlV1_1ParserPLUS-42))|(1<<(WdlV1_1ParserMINUS-42))|(1<<(WdlV1_1ParserNOT-42))|(1<<(WdlV1_1ParserSQUOTE-42))|(1<<(WdlV1_1ParserDQUOTE-42))|(1<<(WdlV1_1ParserIdentifier-42)))) != 0) {
			{
				p.SetState(342)
				p.Expr()
			}
			p.SetState(347)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 23, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(343)
						p.Match(WdlV1_1ParserCOMMA)
					}
					{
						p.SetState(344)
						p.Expr()
					}

				}
				p.SetState(349)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 23, p.GetParserRuleContext())
			}
			p.SetState(351)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == WdlV1_1ParserCOMMA {
				{
					p.SetState(350)
					p.Match(WdlV1_1ParserCOMMA)
				}

			}

			p.SetState(357)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(358)
			p.Match(WdlV1_1ParserRBRACK)
		}

	case 3:
		localctx = NewPair_literalContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(359)
			p.Match(WdlV1_1ParserLPAREN)
		}
		{
			p.SetState(360)
			p.Expr()
		}
		{
			p.SetState(361)
			p.Match(WdlV1_1ParserCOMMA)
		}
		{
			p.SetState(362)
			p.Expr()
		}
		{
			p.SetState(363)
			p.Match(WdlV1_1ParserRPAREN)
		}

	case 4:
		localctx = NewMap_literalContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(365)
			p.Match(WdlV1_1ParserLBRACE)
		}
		p.SetState(384)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (((_la-9)&-(0x1f+1)) == 0 && ((1<<uint((_la-9)))&((1<<(WdlV1_1ParserIF-9))|(1<<(WdlV1_1ParserOBJECTLITERAL-9))|(1<<(WdlV1_1ParserNONELITERAL-9))|(1<<(WdlV1_1ParserIntLiteral-9))|(1<<(WdlV1_1ParserFloatLiteral-9))|(1<<(WdlV1_1ParserBoolLiteral-9))|(1<<(WdlV1_1ParserLPAREN-9))|(1<<(WdlV1_1ParserLBRACE-9)))) != 0) || (((_la-42)&-(0x1f+1)) == 0 && ((1<<uint((_la-42)))&((1<<(WdlV1_1ParserLBRACK-42))|(1<<(WdlV1_1ParserPLUS-42))|(1<<(WdlV1_1ParserMINUS-42))|(1<<(WdlV1_1ParserNOT-42))|(1<<(WdlV1_1ParserSQUOTE-42))|(1<<(WdlV1_1ParserDQUOTE-42))|(1<<(WdlV1_1ParserIdentifier-42)))) != 0) {
			{
				p.SetState(366)
				p.Expr()
			}
			{
				p.SetState(367)
				p.Match(WdlV1_1ParserCOLON)
			}
			{
				p.SetState(368)
				p.Expr()
			}
			p.SetState(376)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 26, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(369)
						p.Match(WdlV1_1ParserCOMMA)
					}
					{
						p.SetState(370)
						p.Expr()
					}
					{
						p.SetState(371)
						p.Match(WdlV1_1ParserCOLON)
					}
					{
						p.SetState(372)
						p.Expr()
					}

				}
				p.SetState(378)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 26, p.GetParserRuleContext())
			}
			p.SetState(380)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == WdlV1_1ParserCOMMA {
				{
					p.SetState(379)
					p.Match(WdlV1_1ParserCOMMA)
				}

			}

			p.SetState(386)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(387)
			p.Match(WdlV1_1ParserRBRACE)
		}

	case 5:
		localctx = NewObject_literalContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(388)
			p.Match(WdlV1_1ParserOBJECTLITERAL)
		}
		{
			p.SetState(389)
			p.Match(WdlV1_1ParserLBRACE)
		}
		p.SetState(408)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == WdlV1_1ParserIdentifier {
			{
				p.SetState(390)
				p.Member()
			}
			{
				p.SetState(391)
				p.Match(WdlV1_1ParserCOLON)
			}
			{
				p.SetState(392)
				p.Expr()
			}
			p.SetState(400)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 29, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(393)
						p.Match(WdlV1_1ParserCOMMA)
					}
					{
						p.SetState(394)
						p.Member()
					}
					{
						p.SetState(395)
						p.Match(WdlV1_1ParserCOLON)
					}
					{
						p.SetState(396)
						p.Expr()
					}

				}
				p.SetState(402)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 29, p.GetParserRuleContext())
			}
			p.SetState(404)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == WdlV1_1ParserCOMMA {
				{
					p.SetState(403)
					p.Match(WdlV1_1ParserCOMMA)
				}

			}

			p.SetState(410)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(411)
			p.Match(WdlV1_1ParserRBRACE)
		}

	case 6:
		localctx = NewStruct_literalContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(412)
			p.Match(WdlV1_1ParserIdentifier)
		}
		{
			p.SetState(413)
			p.Match(WdlV1_1ParserLBRACE)
		}
		p.SetState(432)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == WdlV1_1ParserIdentifier {
			{
				p.SetState(414)
				p.Member()
			}
			{
				p.SetState(415)
				p.Match(WdlV1_1ParserCOLON)
			}
			{
				p.SetState(416)
				p.Expr()
			}
			p.SetState(424)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 32, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(417)
						p.Match(WdlV1_1ParserCOMMA)
					}
					{
						p.SetState(418)
						p.Member()
					}
					{
						p.SetState(419)
						p.Match(WdlV1_1ParserCOLON)
					}
					{
						p.SetState(420)
						p.Expr()
					}

				}
				p.SetState(426)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 32, p.GetParserRuleContext())
			}
			p.SetState(428)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == WdlV1_1ParserCOMMA {
				{
					p.SetState(427)
					p.Match(WdlV1_1ParserCOMMA)
				}

			}

			p.SetState(434)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(435)
			p.Match(WdlV1_1ParserRBRACE)
		}

	case 7:
		localctx = NewIfthenelseContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(436)
			p.Match(WdlV1_1ParserIF)
		}
		{
			p.SetState(437)
			p.Expr()
		}
		{
			p.SetState(438)
			p.Match(WdlV1_1ParserTHEN)
		}
		{
			p.SetState(439)
			p.Expr()
		}
		{
			p.SetState(440)
			p.Match(WdlV1_1ParserELSE)
		}
		{
			p.SetState(441)
			p.Expr()
		}

	case 8:
		localctx = NewExpression_groupContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(443)
			p.Match(WdlV1_1ParserLPAREN)
		}
		{
			p.SetState(444)
			p.Expr()
		}
		{
			p.SetState(445)
			p.Match(WdlV1_1ParserRPAREN)
		}

	case 9:
		localctx = NewNegateContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(447)
			p.Match(WdlV1_1ParserNOT)
		}
		{
			p.SetState(448)
			p.Expr()
		}

	case 10:
		localctx = NewUnarysignedContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(449)
			_la = p.GetTokenStream().LA(1)

			if !(_la == WdlV1_1ParserPLUS || _la == WdlV1_1ParserMINUS) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(450)
			p.Expr()
		}

	case 11:
		localctx = NewPrimitivesContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(451)
			p.Primitive_literal()
		}

	case 12:
		localctx = NewLeft_nameContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(452)
			p.Match(WdlV1_1ParserIdentifier)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(465)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 37, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(463)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 36, p.GetParserRuleContext()) {
			case 1:
				localctx = NewAtContext(p, NewExpr_coreContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, WdlV1_1ParserRULE_expr_core)
				p.SetState(455)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(456)
					p.Match(WdlV1_1ParserLBRACK)
				}
				{
					p.SetState(457)
					p.Expr()
				}
				{
					p.SetState(458)
					p.Match(WdlV1_1ParserRBRACK)
				}

			case 2:
				localctx = NewGet_nameContext(p, NewExpr_coreContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, WdlV1_1ParserRULE_expr_core)
				p.SetState(460)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(461)
					p.Match(WdlV1_1ParserDOT)
				}
				{
					p.SetState(462)
					p.Match(WdlV1_1ParserIdentifier)
				}

			}

		}
		p.SetState(467)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 37, p.GetParserRuleContext())
	}

	return localctx
}

// IVersionContext is an interface to support dynamic dispatch.
type IVersionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVersionContext differentiates from other interfaces.
	IsVersionContext()
}

type VersionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVersionContext() *VersionContext {
	var p = new(VersionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_version
	return p
}

func (*VersionContext) IsVersionContext() {}

func NewVersionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VersionContext {
	var p = new(VersionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_version

	return p
}

func (s *VersionContext) GetParser() antlr.Parser { return s.parser }

func (s *VersionContext) VERSION() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserVERSION, 0)
}

func (s *VersionContext) ReleaseVersion() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserReleaseVersion, 0)
}

func (s *VersionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VersionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VersionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterVersion(s)
	}
}

func (s *VersionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitVersion(s)
	}
}

func (p *WdlV1_1Parser) Version() (localctx IVersionContext) {
	localctx = NewVersionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, WdlV1_1ParserRULE_version)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(468)
		p.Match(WdlV1_1ParserVERSION)
	}
	{
		p.SetState(469)
		p.Match(WdlV1_1ParserReleaseVersion)
	}

	return localctx
}

// IImport_aliasContext is an interface to support dynamic dispatch.
type IImport_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImport_aliasContext differentiates from other interfaces.
	IsImport_aliasContext()
}

type Import_aliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImport_aliasContext() *Import_aliasContext {
	var p = new(Import_aliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_import_alias
	return p
}

func (*Import_aliasContext) IsImport_aliasContext() {}

func NewImport_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Import_aliasContext {
	var p = new(Import_aliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_import_alias

	return p
}

func (s *Import_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *Import_aliasContext) ALIAS() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserALIAS, 0)
}

func (s *Import_aliasContext) AllIdentifier() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserIdentifier)
}

func (s *Import_aliasContext) Identifier(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, i)
}

func (s *Import_aliasContext) AS() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserAS, 0)
}

func (s *Import_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Import_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Import_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterImport_alias(s)
	}
}

func (s *Import_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitImport_alias(s)
	}
}

func (p *WdlV1_1Parser) Import_alias() (localctx IImport_aliasContext) {
	localctx = NewImport_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, WdlV1_1ParserRULE_import_alias)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(471)
		p.Match(WdlV1_1ParserALIAS)
	}
	{
		p.SetState(472)
		p.Match(WdlV1_1ParserIdentifier)
	}
	{
		p.SetState(473)
		p.Match(WdlV1_1ParserAS)
	}
	{
		p.SetState(474)
		p.Match(WdlV1_1ParserIdentifier)
	}

	return localctx
}

// IImport_asContext is an interface to support dynamic dispatch.
type IImport_asContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImport_asContext differentiates from other interfaces.
	IsImport_asContext()
}

type Import_asContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImport_asContext() *Import_asContext {
	var p = new(Import_asContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_import_as
	return p
}

func (*Import_asContext) IsImport_asContext() {}

func NewImport_asContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Import_asContext {
	var p = new(Import_asContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_import_as

	return p
}

func (s *Import_asContext) GetParser() antlr.Parser { return s.parser }

func (s *Import_asContext) AS() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserAS, 0)
}

func (s *Import_asContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *Import_asContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Import_asContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Import_asContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterImport_as(s)
	}
}

func (s *Import_asContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitImport_as(s)
	}
}

func (p *WdlV1_1Parser) Import_as() (localctx IImport_asContext) {
	localctx = NewImport_asContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, WdlV1_1ParserRULE_import_as)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(476)
		p.Match(WdlV1_1ParserAS)
	}
	{
		p.SetState(477)
		p.Match(WdlV1_1ParserIdentifier)
	}

	return localctx
}

// IImport_docContext is an interface to support dynamic dispatch.
type IImport_docContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImport_docContext differentiates from other interfaces.
	IsImport_docContext()
}

type Import_docContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImport_docContext() *Import_docContext {
	var p = new(Import_docContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_import_doc
	return p
}

func (*Import_docContext) IsImport_docContext() {}

func NewImport_docContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Import_docContext {
	var p = new(Import_docContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_import_doc

	return p
}

func (s *Import_docContext) GetParser() antlr.Parser { return s.parser }

func (s *Import_docContext) IMPORT() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIMPORT, 0)
}

func (s *Import_docContext) R_string() IR_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_stringContext)
}

func (s *Import_docContext) Import_as() IImport_asContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImport_asContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImport_asContext)
}

func (s *Import_docContext) AllImport_alias() []IImport_aliasContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IImport_aliasContext)(nil)).Elem())
	var tst = make([]IImport_aliasContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IImport_aliasContext)
		}
	}

	return tst
}

func (s *Import_docContext) Import_alias(i int) IImport_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImport_aliasContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IImport_aliasContext)
}

func (s *Import_docContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Import_docContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Import_docContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterImport_doc(s)
	}
}

func (s *Import_docContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitImport_doc(s)
	}
}

func (p *WdlV1_1Parser) Import_doc() (localctx IImport_docContext) {
	localctx = NewImport_docContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, WdlV1_1ParserRULE_import_doc)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(479)
		p.Match(WdlV1_1ParserIMPORT)
	}
	{
		p.SetState(480)
		p.R_string()
	}
	p.SetState(482)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == WdlV1_1ParserAS {
		{
			p.SetState(481)
			p.Import_as()
		}

	}
	p.SetState(487)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == WdlV1_1ParserALIAS {
		{
			p.SetState(484)
			p.Import_alias()
		}

		p.SetState(489)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IR_structContext is an interface to support dynamic dispatch.
type IR_structContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsR_structContext differentiates from other interfaces.
	IsR_structContext()
}

type R_structContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyR_structContext() *R_structContext {
	var p = new(R_structContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_r_struct
	return p
}

func (*R_structContext) IsR_structContext() {}

func NewR_structContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *R_structContext {
	var p = new(R_structContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_r_struct

	return p
}

func (s *R_structContext) GetParser() antlr.Parser { return s.parser }

func (s *R_structContext) STRUCT() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserSTRUCT, 0)
}

func (s *R_structContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *R_structContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACE, 0)
}

func (s *R_structContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACE, 0)
}

func (s *R_structContext) AllUnbound_decls() []IUnbound_declsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUnbound_declsContext)(nil)).Elem())
	var tst = make([]IUnbound_declsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUnbound_declsContext)
		}
	}

	return tst
}

func (s *R_structContext) Unbound_decls(i int) IUnbound_declsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnbound_declsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUnbound_declsContext)
}

func (s *R_structContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *R_structContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *R_structContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterR_struct(s)
	}
}

func (s *R_structContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitR_struct(s)
	}
}

func (p *WdlV1_1Parser) R_struct() (localctx IR_structContext) {
	localctx = NewR_structContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, WdlV1_1ParserRULE_r_struct)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(490)
		p.Match(WdlV1_1ParserSTRUCT)
	}
	{
		p.SetState(491)
		p.Match(WdlV1_1ParserIdentifier)
	}
	{
		p.SetState(492)
		p.Match(WdlV1_1ParserLBRACE)
	}
	p.SetState(496)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<WdlV1_1ParserBOOLEAN)|(1<<WdlV1_1ParserINT)|(1<<WdlV1_1ParserFLOAT)|(1<<WdlV1_1ParserSTRING)|(1<<WdlV1_1ParserFILE)|(1<<WdlV1_1ParserARRAY)|(1<<WdlV1_1ParserMAP)|(1<<WdlV1_1ParserOBJECT)|(1<<WdlV1_1ParserPAIR))) != 0) || _la == WdlV1_1ParserIdentifier {
		{
			p.SetState(493)
			p.Unbound_decls()
		}

		p.SetState(498)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(499)
		p.Match(WdlV1_1ParserRBRACE)
	}

	return localctx
}

// IMeta_valueContext is an interface to support dynamic dispatch.
type IMeta_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMeta_valueContext differentiates from other interfaces.
	IsMeta_valueContext()
}

type Meta_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMeta_valueContext() *Meta_valueContext {
	var p = new(Meta_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_meta_value
	return p
}

func (*Meta_valueContext) IsMeta_valueContext() {}

func NewMeta_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Meta_valueContext {
	var p = new(Meta_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_meta_value

	return p
}

func (s *Meta_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Meta_valueContext) MetaNull() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaNull, 0)
}

func (s *Meta_valueContext) MetaBool() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaBool, 0)
}

func (s *Meta_valueContext) MetaInt() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaInt, 0)
}

func (s *Meta_valueContext) MetaFloat() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaFloat, 0)
}

func (s *Meta_valueContext) Meta_string() IMeta_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMeta_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMeta_stringContext)
}

func (s *Meta_valueContext) Meta_object() IMeta_objectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMeta_objectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMeta_objectContext)
}

func (s *Meta_valueContext) Meta_array() IMeta_arrayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMeta_arrayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMeta_arrayContext)
}

func (s *Meta_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Meta_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Meta_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterMeta_value(s)
	}
}

func (s *Meta_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitMeta_value(s)
	}
}

func (p *WdlV1_1Parser) Meta_value() (localctx IMeta_valueContext) {
	localctx = NewMeta_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, WdlV1_1ParserRULE_meta_value)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(508)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case WdlV1_1ParserMetaNull:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(501)
			p.Match(WdlV1_1ParserMetaNull)
		}

	case WdlV1_1ParserMetaBool:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(502)
			p.Match(WdlV1_1ParserMetaBool)
		}

	case WdlV1_1ParserMetaInt:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(503)
			p.Match(WdlV1_1ParserMetaInt)
		}

	case WdlV1_1ParserMetaFloat:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(504)
			p.Match(WdlV1_1ParserMetaFloat)
		}

	case WdlV1_1ParserMetaSquote, WdlV1_1ParserMetaDquote:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(505)
			p.Meta_string()
		}

	case WdlV1_1ParserMetaEmptyObject, WdlV1_1ParserMetaLbrace:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(506)
			p.Meta_object()
		}

	case WdlV1_1ParserMetaEmptyArray, WdlV1_1ParserMetaLbrack:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(507)
			p.Meta_array()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IMeta_string_partContext is an interface to support dynamic dispatch.
type IMeta_string_partContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMeta_string_partContext differentiates from other interfaces.
	IsMeta_string_partContext()
}

type Meta_string_partContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMeta_string_partContext() *Meta_string_partContext {
	var p = new(Meta_string_partContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_meta_string_part
	return p
}

func (*Meta_string_partContext) IsMeta_string_partContext() {}

func NewMeta_string_partContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Meta_string_partContext {
	var p = new(Meta_string_partContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_meta_string_part

	return p
}

func (s *Meta_string_partContext) GetParser() antlr.Parser { return s.parser }

func (s *Meta_string_partContext) AllMetaStringPart() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserMetaStringPart)
}

func (s *Meta_string_partContext) MetaStringPart(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaStringPart, i)
}

func (s *Meta_string_partContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Meta_string_partContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Meta_string_partContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterMeta_string_part(s)
	}
}

func (s *Meta_string_partContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitMeta_string_part(s)
	}
}

func (p *WdlV1_1Parser) Meta_string_part() (localctx IMeta_string_partContext) {
	localctx = NewMeta_string_partContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, WdlV1_1ParserRULE_meta_string_part)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(513)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == WdlV1_1ParserMetaStringPart {
		{
			p.SetState(510)
			p.Match(WdlV1_1ParserMetaStringPart)
		}

		p.SetState(515)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IMeta_stringContext is an interface to support dynamic dispatch.
type IMeta_stringContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMeta_stringContext differentiates from other interfaces.
	IsMeta_stringContext()
}

type Meta_stringContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMeta_stringContext() *Meta_stringContext {
	var p = new(Meta_stringContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_meta_string
	return p
}

func (*Meta_stringContext) IsMeta_stringContext() {}

func NewMeta_stringContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Meta_stringContext {
	var p = new(Meta_stringContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_meta_string

	return p
}

func (s *Meta_stringContext) GetParser() antlr.Parser { return s.parser }

func (s *Meta_stringContext) AllMetaDquote() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserMetaDquote)
}

func (s *Meta_stringContext) MetaDquote(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaDquote, i)
}

func (s *Meta_stringContext) Meta_string_part() IMeta_string_partContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMeta_string_partContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMeta_string_partContext)
}

func (s *Meta_stringContext) AllMetaSquote() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserMetaSquote)
}

func (s *Meta_stringContext) MetaSquote(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaSquote, i)
}

func (s *Meta_stringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Meta_stringContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Meta_stringContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterMeta_string(s)
	}
}

func (s *Meta_stringContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitMeta_string(s)
	}
}

func (p *WdlV1_1Parser) Meta_string() (localctx IMeta_stringContext) {
	localctx = NewMeta_stringContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, WdlV1_1ParserRULE_meta_string)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(524)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case WdlV1_1ParserMetaDquote:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(516)
			p.Match(WdlV1_1ParserMetaDquote)
		}
		{
			p.SetState(517)
			p.Meta_string_part()
		}
		{
			p.SetState(518)
			p.Match(WdlV1_1ParserMetaDquote)
		}

	case WdlV1_1ParserMetaSquote:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(520)
			p.Match(WdlV1_1ParserMetaSquote)
		}
		{
			p.SetState(521)
			p.Meta_string_part()
		}
		{
			p.SetState(522)
			p.Match(WdlV1_1ParserMetaSquote)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IMeta_arrayContext is an interface to support dynamic dispatch.
type IMeta_arrayContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMeta_arrayContext differentiates from other interfaces.
	IsMeta_arrayContext()
}

type Meta_arrayContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMeta_arrayContext() *Meta_arrayContext {
	var p = new(Meta_arrayContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_meta_array
	return p
}

func (*Meta_arrayContext) IsMeta_arrayContext() {}

func NewMeta_arrayContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Meta_arrayContext {
	var p = new(Meta_arrayContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_meta_array

	return p
}

func (s *Meta_arrayContext) GetParser() antlr.Parser { return s.parser }

func (s *Meta_arrayContext) MetaEmptyArray() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaEmptyArray, 0)
}

func (s *Meta_arrayContext) MetaLbrack() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaLbrack, 0)
}

func (s *Meta_arrayContext) AllMeta_value() []IMeta_valueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMeta_valueContext)(nil)).Elem())
	var tst = make([]IMeta_valueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMeta_valueContext)
		}
	}

	return tst
}

func (s *Meta_arrayContext) Meta_value(i int) IMeta_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMeta_valueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMeta_valueContext)
}

func (s *Meta_arrayContext) MetaArrayCommaRbrack() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaArrayCommaRbrack, 0)
}

func (s *Meta_arrayContext) MetaRbrack() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaRbrack, 0)
}

func (s *Meta_arrayContext) AllMetaArrayComma() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserMetaArrayComma)
}

func (s *Meta_arrayContext) MetaArrayComma(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaArrayComma, i)
}

func (s *Meta_arrayContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Meta_arrayContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Meta_arrayContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterMeta_array(s)
	}
}

func (s *Meta_arrayContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitMeta_array(s)
	}
}

func (p *WdlV1_1Parser) Meta_array() (localctx IMeta_arrayContext) {
	localctx = NewMeta_arrayContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, WdlV1_1ParserRULE_meta_array)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(538)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case WdlV1_1ParserMetaEmptyArray:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(526)
			p.Match(WdlV1_1ParserMetaEmptyArray)
		}

	case WdlV1_1ParserMetaLbrack:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(527)
			p.Match(WdlV1_1ParserMetaLbrack)
		}
		{
			p.SetState(528)
			p.Meta_value()
		}
		p.SetState(533)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == WdlV1_1ParserMetaArrayComma {
			{
				p.SetState(529)
				p.Match(WdlV1_1ParserMetaArrayComma)
			}
			{
				p.SetState(530)
				p.Meta_value()
			}

			p.SetState(535)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(536)
			_la = p.GetTokenStream().LA(1)

			if !(_la == WdlV1_1ParserMetaArrayCommaRbrack || _la == WdlV1_1ParserMetaRbrack) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IMeta_objectContext is an interface to support dynamic dispatch.
type IMeta_objectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMeta_objectContext differentiates from other interfaces.
	IsMeta_objectContext()
}

type Meta_objectContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMeta_objectContext() *Meta_objectContext {
	var p = new(Meta_objectContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_meta_object
	return p
}

func (*Meta_objectContext) IsMeta_objectContext() {}

func NewMeta_objectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Meta_objectContext {
	var p = new(Meta_objectContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_meta_object

	return p
}

func (s *Meta_objectContext) GetParser() antlr.Parser { return s.parser }

func (s *Meta_objectContext) MetaEmptyObject() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaEmptyObject, 0)
}

func (s *Meta_objectContext) MetaLbrace() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaLbrace, 0)
}

func (s *Meta_objectContext) AllMeta_object_kv() []IMeta_object_kvContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMeta_object_kvContext)(nil)).Elem())
	var tst = make([]IMeta_object_kvContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMeta_object_kvContext)
		}
	}

	return tst
}

func (s *Meta_objectContext) Meta_object_kv(i int) IMeta_object_kvContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMeta_object_kvContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMeta_object_kvContext)
}

func (s *Meta_objectContext) MetaObjectCommaRbrace() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaObjectCommaRbrace, 0)
}

func (s *Meta_objectContext) MetaRbrace() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaRbrace, 0)
}

func (s *Meta_objectContext) AllMetaObjectComma() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserMetaObjectComma)
}

func (s *Meta_objectContext) MetaObjectComma(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaObjectComma, i)
}

func (s *Meta_objectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Meta_objectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Meta_objectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterMeta_object(s)
	}
}

func (s *Meta_objectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitMeta_object(s)
	}
}

func (p *WdlV1_1Parser) Meta_object() (localctx IMeta_objectContext) {
	localctx = NewMeta_objectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, WdlV1_1ParserRULE_meta_object)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(552)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case WdlV1_1ParserMetaEmptyObject:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(540)
			p.Match(WdlV1_1ParserMetaEmptyObject)
		}

	case WdlV1_1ParserMetaLbrace:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(541)
			p.Match(WdlV1_1ParserMetaLbrace)
		}
		{
			p.SetState(542)
			p.Meta_object_kv()
		}
		p.SetState(547)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == WdlV1_1ParserMetaObjectComma {
			{
				p.SetState(543)
				p.Match(WdlV1_1ParserMetaObjectComma)
			}
			{
				p.SetState(544)
				p.Meta_object_kv()
			}

			p.SetState(549)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(550)
			_la = p.GetTokenStream().LA(1)

			if !(_la == WdlV1_1ParserMetaObjectCommaRbrace || _la == WdlV1_1ParserMetaRbrace) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IMeta_object_kvContext is an interface to support dynamic dispatch.
type IMeta_object_kvContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMeta_object_kvContext differentiates from other interfaces.
	IsMeta_object_kvContext()
}

type Meta_object_kvContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMeta_object_kvContext() *Meta_object_kvContext {
	var p = new(Meta_object_kvContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_meta_object_kv
	return p
}

func (*Meta_object_kvContext) IsMeta_object_kvContext() {}

func NewMeta_object_kvContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Meta_object_kvContext {
	var p = new(Meta_object_kvContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_meta_object_kv

	return p
}

func (s *Meta_object_kvContext) GetParser() antlr.Parser { return s.parser }

func (s *Meta_object_kvContext) MetaObjectIdentifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaObjectIdentifier, 0)
}

func (s *Meta_object_kvContext) MetaObjectColon() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaObjectColon, 0)
}

func (s *Meta_object_kvContext) Meta_value() IMeta_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMeta_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMeta_valueContext)
}

func (s *Meta_object_kvContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Meta_object_kvContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Meta_object_kvContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterMeta_object_kv(s)
	}
}

func (s *Meta_object_kvContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitMeta_object_kv(s)
	}
}

func (p *WdlV1_1Parser) Meta_object_kv() (localctx IMeta_object_kvContext) {
	localctx = NewMeta_object_kvContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, WdlV1_1ParserRULE_meta_object_kv)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(554)
		p.Match(WdlV1_1ParserMetaObjectIdentifier)
	}
	{
		p.SetState(555)
		p.Match(WdlV1_1ParserMetaObjectColon)
	}
	{
		p.SetState(556)
		p.Meta_value()
	}

	return localctx
}

// IMeta_kvContext is an interface to support dynamic dispatch.
type IMeta_kvContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMeta_kvContext differentiates from other interfaces.
	IsMeta_kvContext()
}

type Meta_kvContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMeta_kvContext() *Meta_kvContext {
	var p = new(Meta_kvContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_meta_kv
	return p
}

func (*Meta_kvContext) IsMeta_kvContext() {}

func NewMeta_kvContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Meta_kvContext {
	var p = new(Meta_kvContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_meta_kv

	return p
}

func (s *Meta_kvContext) GetParser() antlr.Parser { return s.parser }

func (s *Meta_kvContext) MetaIdentifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaIdentifier, 0)
}

func (s *Meta_kvContext) MetaColon() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMetaColon, 0)
}

func (s *Meta_kvContext) Meta_value() IMeta_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMeta_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMeta_valueContext)
}

func (s *Meta_kvContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Meta_kvContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Meta_kvContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterMeta_kv(s)
	}
}

func (s *Meta_kvContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitMeta_kv(s)
	}
}

func (p *WdlV1_1Parser) Meta_kv() (localctx IMeta_kvContext) {
	localctx = NewMeta_kvContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, WdlV1_1ParserRULE_meta_kv)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(558)
		p.Match(WdlV1_1ParserMetaIdentifier)
	}
	{
		p.SetState(559)
		p.Match(WdlV1_1ParserMetaColon)
	}
	{
		p.SetState(560)
		p.Meta_value()
	}

	return localctx
}

// IParameter_metaContext is an interface to support dynamic dispatch.
type IParameter_metaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameter_metaContext differentiates from other interfaces.
	IsParameter_metaContext()
}

type Parameter_metaContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameter_metaContext() *Parameter_metaContext {
	var p = new(Parameter_metaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_parameter_meta
	return p
}

func (*Parameter_metaContext) IsParameter_metaContext() {}

func NewParameter_metaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parameter_metaContext {
	var p = new(Parameter_metaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_parameter_meta

	return p
}

func (s *Parameter_metaContext) GetParser() antlr.Parser { return s.parser }

func (s *Parameter_metaContext) PARAMETERMETA() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserPARAMETERMETA, 0)
}

func (s *Parameter_metaContext) BeginMeta() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserBeginMeta, 0)
}

func (s *Parameter_metaContext) EndMeta() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserEndMeta, 0)
}

func (s *Parameter_metaContext) AllMeta_kv() []IMeta_kvContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMeta_kvContext)(nil)).Elem())
	var tst = make([]IMeta_kvContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMeta_kvContext)
		}
	}

	return tst
}

func (s *Parameter_metaContext) Meta_kv(i int) IMeta_kvContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMeta_kvContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMeta_kvContext)
}

func (s *Parameter_metaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parameter_metaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Parameter_metaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterParameter_meta(s)
	}
}

func (s *Parameter_metaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitParameter_meta(s)
	}
}

func (p *WdlV1_1Parser) Parameter_meta() (localctx IParameter_metaContext) {
	localctx = NewParameter_metaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, WdlV1_1ParserRULE_parameter_meta)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(562)
		p.Match(WdlV1_1ParserPARAMETERMETA)
	}
	{
		p.SetState(563)
		p.Match(WdlV1_1ParserBeginMeta)
	}
	p.SetState(567)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == WdlV1_1ParserMetaIdentifier {
		{
			p.SetState(564)
			p.Meta_kv()
		}

		p.SetState(569)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(570)
		p.Match(WdlV1_1ParserEndMeta)
	}

	return localctx
}

// IMetaContext is an interface to support dynamic dispatch.
type IMetaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMetaContext differentiates from other interfaces.
	IsMetaContext()
}

type MetaContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMetaContext() *MetaContext {
	var p = new(MetaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_meta
	return p
}

func (*MetaContext) IsMetaContext() {}

func NewMetaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MetaContext {
	var p = new(MetaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_meta

	return p
}

func (s *MetaContext) GetParser() antlr.Parser { return s.parser }

func (s *MetaContext) META() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserMETA, 0)
}

func (s *MetaContext) BeginMeta() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserBeginMeta, 0)
}

func (s *MetaContext) EndMeta() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserEndMeta, 0)
}

func (s *MetaContext) AllMeta_kv() []IMeta_kvContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMeta_kvContext)(nil)).Elem())
	var tst = make([]IMeta_kvContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMeta_kvContext)
		}
	}

	return tst
}

func (s *MetaContext) Meta_kv(i int) IMeta_kvContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMeta_kvContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMeta_kvContext)
}

func (s *MetaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MetaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MetaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterMeta(s)
	}
}

func (s *MetaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitMeta(s)
	}
}

func (p *WdlV1_1Parser) Meta() (localctx IMetaContext) {
	localctx = NewMetaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, WdlV1_1ParserRULE_meta)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(572)
		p.Match(WdlV1_1ParserMETA)
	}
	{
		p.SetState(573)
		p.Match(WdlV1_1ParserBeginMeta)
	}
	p.SetState(577)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == WdlV1_1ParserMetaIdentifier {
		{
			p.SetState(574)
			p.Meta_kv()
		}

		p.SetState(579)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(580)
		p.Match(WdlV1_1ParserEndMeta)
	}

	return localctx
}

// ITask_runtime_kvContext is an interface to support dynamic dispatch.
type ITask_runtime_kvContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTask_runtime_kvContext differentiates from other interfaces.
	IsTask_runtime_kvContext()
}

type Task_runtime_kvContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTask_runtime_kvContext() *Task_runtime_kvContext {
	var p = new(Task_runtime_kvContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_task_runtime_kv
	return p
}

func (*Task_runtime_kvContext) IsTask_runtime_kvContext() {}

func NewTask_runtime_kvContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Task_runtime_kvContext {
	var p = new(Task_runtime_kvContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_task_runtime_kv

	return p
}

func (s *Task_runtime_kvContext) GetParser() antlr.Parser { return s.parser }

func (s *Task_runtime_kvContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *Task_runtime_kvContext) COLON() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCOLON, 0)
}

func (s *Task_runtime_kvContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Task_runtime_kvContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Task_runtime_kvContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Task_runtime_kvContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterTask_runtime_kv(s)
	}
}

func (s *Task_runtime_kvContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitTask_runtime_kv(s)
	}
}

func (p *WdlV1_1Parser) Task_runtime_kv() (localctx ITask_runtime_kvContext) {
	localctx = NewTask_runtime_kvContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, WdlV1_1ParserRULE_task_runtime_kv)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(582)
		p.Match(WdlV1_1ParserIdentifier)
	}
	{
		p.SetState(583)
		p.Match(WdlV1_1ParserCOLON)
	}
	{
		p.SetState(584)
		p.Expr()
	}

	return localctx
}

// ITask_runtimeContext is an interface to support dynamic dispatch.
type ITask_runtimeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTask_runtimeContext differentiates from other interfaces.
	IsTask_runtimeContext()
}

type Task_runtimeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTask_runtimeContext() *Task_runtimeContext {
	var p = new(Task_runtimeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_task_runtime
	return p
}

func (*Task_runtimeContext) IsTask_runtimeContext() {}

func NewTask_runtimeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Task_runtimeContext {
	var p = new(Task_runtimeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_task_runtime

	return p
}

func (s *Task_runtimeContext) GetParser() antlr.Parser { return s.parser }

func (s *Task_runtimeContext) RUNTIME() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRUNTIME, 0)
}

func (s *Task_runtimeContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACE, 0)
}

func (s *Task_runtimeContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACE, 0)
}

func (s *Task_runtimeContext) AllTask_runtime_kv() []ITask_runtime_kvContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITask_runtime_kvContext)(nil)).Elem())
	var tst = make([]ITask_runtime_kvContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITask_runtime_kvContext)
		}
	}

	return tst
}

func (s *Task_runtimeContext) Task_runtime_kv(i int) ITask_runtime_kvContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITask_runtime_kvContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITask_runtime_kvContext)
}

func (s *Task_runtimeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Task_runtimeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Task_runtimeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterTask_runtime(s)
	}
}

func (s *Task_runtimeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitTask_runtime(s)
	}
}

func (p *WdlV1_1Parser) Task_runtime() (localctx ITask_runtimeContext) {
	localctx = NewTask_runtimeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, WdlV1_1ParserRULE_task_runtime)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(586)
		p.Match(WdlV1_1ParserRUNTIME)
	}
	{
		p.SetState(587)
		p.Match(WdlV1_1ParserLBRACE)
	}
	p.SetState(591)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == WdlV1_1ParserIdentifier {
		{
			p.SetState(588)
			p.Task_runtime_kv()
		}

		p.SetState(593)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(594)
		p.Match(WdlV1_1ParserRBRACE)
	}

	return localctx
}

// ITask_inputContext is an interface to support dynamic dispatch.
type ITask_inputContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTask_inputContext differentiates from other interfaces.
	IsTask_inputContext()
}

type Task_inputContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTask_inputContext() *Task_inputContext {
	var p = new(Task_inputContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_task_input
	return p
}

func (*Task_inputContext) IsTask_inputContext() {}

func NewTask_inputContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Task_inputContext {
	var p = new(Task_inputContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_task_input

	return p
}

func (s *Task_inputContext) GetParser() antlr.Parser { return s.parser }

func (s *Task_inputContext) INPUT() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserINPUT, 0)
}

func (s *Task_inputContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACE, 0)
}

func (s *Task_inputContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACE, 0)
}

func (s *Task_inputContext) AllAny_decls() []IAny_declsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAny_declsContext)(nil)).Elem())
	var tst = make([]IAny_declsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAny_declsContext)
		}
	}

	return tst
}

func (s *Task_inputContext) Any_decls(i int) IAny_declsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_declsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAny_declsContext)
}

func (s *Task_inputContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Task_inputContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Task_inputContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterTask_input(s)
	}
}

func (s *Task_inputContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitTask_input(s)
	}
}

func (p *WdlV1_1Parser) Task_input() (localctx ITask_inputContext) {
	localctx = NewTask_inputContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, WdlV1_1ParserRULE_task_input)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(596)
		p.Match(WdlV1_1ParserINPUT)
	}
	{
		p.SetState(597)
		p.Match(WdlV1_1ParserLBRACE)
	}
	p.SetState(601)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<WdlV1_1ParserBOOLEAN)|(1<<WdlV1_1ParserINT)|(1<<WdlV1_1ParserFLOAT)|(1<<WdlV1_1ParserSTRING)|(1<<WdlV1_1ParserFILE)|(1<<WdlV1_1ParserARRAY)|(1<<WdlV1_1ParserMAP)|(1<<WdlV1_1ParserOBJECT)|(1<<WdlV1_1ParserPAIR))) != 0) || _la == WdlV1_1ParserIdentifier {
		{
			p.SetState(598)
			p.Any_decls()
		}

		p.SetState(603)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(604)
		p.Match(WdlV1_1ParserRBRACE)
	}

	return localctx
}

// ITask_outputContext is an interface to support dynamic dispatch.
type ITask_outputContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTask_outputContext differentiates from other interfaces.
	IsTask_outputContext()
}

type Task_outputContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTask_outputContext() *Task_outputContext {
	var p = new(Task_outputContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_task_output
	return p
}

func (*Task_outputContext) IsTask_outputContext() {}

func NewTask_outputContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Task_outputContext {
	var p = new(Task_outputContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_task_output

	return p
}

func (s *Task_outputContext) GetParser() antlr.Parser { return s.parser }

func (s *Task_outputContext) OUTPUT() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserOUTPUT, 0)
}

func (s *Task_outputContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACE, 0)
}

func (s *Task_outputContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACE, 0)
}

func (s *Task_outputContext) AllBound_decls() []IBound_declsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBound_declsContext)(nil)).Elem())
	var tst = make([]IBound_declsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBound_declsContext)
		}
	}

	return tst
}

func (s *Task_outputContext) Bound_decls(i int) IBound_declsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBound_declsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBound_declsContext)
}

func (s *Task_outputContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Task_outputContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Task_outputContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterTask_output(s)
	}
}

func (s *Task_outputContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitTask_output(s)
	}
}

func (p *WdlV1_1Parser) Task_output() (localctx ITask_outputContext) {
	localctx = NewTask_outputContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, WdlV1_1ParserRULE_task_output)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(606)
		p.Match(WdlV1_1ParserOUTPUT)
	}
	{
		p.SetState(607)
		p.Match(WdlV1_1ParserLBRACE)
	}
	p.SetState(611)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<WdlV1_1ParserBOOLEAN)|(1<<WdlV1_1ParserINT)|(1<<WdlV1_1ParserFLOAT)|(1<<WdlV1_1ParserSTRING)|(1<<WdlV1_1ParserFILE)|(1<<WdlV1_1ParserARRAY)|(1<<WdlV1_1ParserMAP)|(1<<WdlV1_1ParserOBJECT)|(1<<WdlV1_1ParserPAIR))) != 0) || _la == WdlV1_1ParserIdentifier {
		{
			p.SetState(608)
			p.Bound_decls()
		}

		p.SetState(613)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(614)
		p.Match(WdlV1_1ParserRBRACE)
	}

	return localctx
}

// ITask_command_string_partContext is an interface to support dynamic dispatch.
type ITask_command_string_partContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTask_command_string_partContext differentiates from other interfaces.
	IsTask_command_string_partContext()
}

type Task_command_string_partContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTask_command_string_partContext() *Task_command_string_partContext {
	var p = new(Task_command_string_partContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_task_command_string_part
	return p
}

func (*Task_command_string_partContext) IsTask_command_string_partContext() {}

func NewTask_command_string_partContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Task_command_string_partContext {
	var p = new(Task_command_string_partContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_task_command_string_part

	return p
}

func (s *Task_command_string_partContext) GetParser() antlr.Parser { return s.parser }

func (s *Task_command_string_partContext) AllCommandStringPart() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserCommandStringPart)
}

func (s *Task_command_string_partContext) CommandStringPart(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCommandStringPart, i)
}

func (s *Task_command_string_partContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Task_command_string_partContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Task_command_string_partContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterTask_command_string_part(s)
	}
}

func (s *Task_command_string_partContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitTask_command_string_part(s)
	}
}

func (p *WdlV1_1Parser) Task_command_string_part() (localctx ITask_command_string_partContext) {
	localctx = NewTask_command_string_partContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, WdlV1_1ParserRULE_task_command_string_part)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(619)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == WdlV1_1ParserCommandStringPart {
		{
			p.SetState(616)
			p.Match(WdlV1_1ParserCommandStringPart)
		}

		p.SetState(621)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITask_command_expr_partContext is an interface to support dynamic dispatch.
type ITask_command_expr_partContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTask_command_expr_partContext differentiates from other interfaces.
	IsTask_command_expr_partContext()
}

type Task_command_expr_partContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTask_command_expr_partContext() *Task_command_expr_partContext {
	var p = new(Task_command_expr_partContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_task_command_expr_part
	return p
}

func (*Task_command_expr_partContext) IsTask_command_expr_partContext() {}

func NewTask_command_expr_partContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Task_command_expr_partContext {
	var p = new(Task_command_expr_partContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_task_command_expr_part

	return p
}

func (s *Task_command_expr_partContext) GetParser() antlr.Parser { return s.parser }

func (s *Task_command_expr_partContext) StringCommandStart() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserStringCommandStart, 0)
}

func (s *Task_command_expr_partContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Task_command_expr_partContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACE, 0)
}

func (s *Task_command_expr_partContext) AllExpression_placeholder_option() []IExpression_placeholder_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpression_placeholder_optionContext)(nil)).Elem())
	var tst = make([]IExpression_placeholder_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpression_placeholder_optionContext)
		}
	}

	return tst
}

func (s *Task_command_expr_partContext) Expression_placeholder_option(i int) IExpression_placeholder_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_placeholder_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpression_placeholder_optionContext)
}

func (s *Task_command_expr_partContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Task_command_expr_partContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Task_command_expr_partContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterTask_command_expr_part(s)
	}
}

func (s *Task_command_expr_partContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitTask_command_expr_part(s)
	}
}

func (p *WdlV1_1Parser) Task_command_expr_part() (localctx ITask_command_expr_partContext) {
	localctx = NewTask_command_expr_partContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, WdlV1_1ParserRULE_task_command_expr_part)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(622)
		p.Match(WdlV1_1ParserStringCommandStart)
	}
	p.SetState(626)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(623)
				p.Expression_placeholder_option()
			}

		}
		p.SetState(628)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext())
	}
	{
		p.SetState(629)
		p.Expr()
	}
	{
		p.SetState(630)
		p.Match(WdlV1_1ParserRBRACE)
	}

	return localctx
}

// ITask_command_expr_with_stringContext is an interface to support dynamic dispatch.
type ITask_command_expr_with_stringContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTask_command_expr_with_stringContext differentiates from other interfaces.
	IsTask_command_expr_with_stringContext()
}

type Task_command_expr_with_stringContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTask_command_expr_with_stringContext() *Task_command_expr_with_stringContext {
	var p = new(Task_command_expr_with_stringContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_task_command_expr_with_string
	return p
}

func (*Task_command_expr_with_stringContext) IsTask_command_expr_with_stringContext() {}

func NewTask_command_expr_with_stringContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Task_command_expr_with_stringContext {
	var p = new(Task_command_expr_with_stringContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_task_command_expr_with_string

	return p
}

func (s *Task_command_expr_with_stringContext) GetParser() antlr.Parser { return s.parser }

func (s *Task_command_expr_with_stringContext) Task_command_expr_part() ITask_command_expr_partContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITask_command_expr_partContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITask_command_expr_partContext)
}

func (s *Task_command_expr_with_stringContext) Task_command_string_part() ITask_command_string_partContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITask_command_string_partContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITask_command_string_partContext)
}

func (s *Task_command_expr_with_stringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Task_command_expr_with_stringContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Task_command_expr_with_stringContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterTask_command_expr_with_string(s)
	}
}

func (s *Task_command_expr_with_stringContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitTask_command_expr_with_string(s)
	}
}

func (p *WdlV1_1Parser) Task_command_expr_with_string() (localctx ITask_command_expr_with_stringContext) {
	localctx = NewTask_command_expr_with_stringContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, WdlV1_1ParserRULE_task_command_expr_with_string)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(632)
		p.Task_command_expr_part()
	}
	{
		p.SetState(633)
		p.Task_command_string_part()
	}

	return localctx
}

// ITask_commandContext is an interface to support dynamic dispatch.
type ITask_commandContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTask_commandContext differentiates from other interfaces.
	IsTask_commandContext()
}

type Task_commandContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTask_commandContext() *Task_commandContext {
	var p = new(Task_commandContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_task_command
	return p
}

func (*Task_commandContext) IsTask_commandContext() {}

func NewTask_commandContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Task_commandContext {
	var p = new(Task_commandContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_task_command

	return p
}

func (s *Task_commandContext) GetParser() antlr.Parser { return s.parser }

func (s *Task_commandContext) COMMAND() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCOMMAND, 0)
}

func (s *Task_commandContext) BeginLBrace() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserBeginLBrace, 0)
}

func (s *Task_commandContext) Task_command_string_part() ITask_command_string_partContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITask_command_string_partContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITask_command_string_partContext)
}

func (s *Task_commandContext) EndCommand() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserEndCommand, 0)
}

func (s *Task_commandContext) AllTask_command_expr_with_string() []ITask_command_expr_with_stringContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITask_command_expr_with_stringContext)(nil)).Elem())
	var tst = make([]ITask_command_expr_with_stringContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITask_command_expr_with_stringContext)
		}
	}

	return tst
}

func (s *Task_commandContext) Task_command_expr_with_string(i int) ITask_command_expr_with_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITask_command_expr_with_stringContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITask_command_expr_with_stringContext)
}

func (s *Task_commandContext) BeginHereDoc() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserBeginHereDoc, 0)
}

func (s *Task_commandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Task_commandContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Task_commandContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterTask_command(s)
	}
}

func (s *Task_commandContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitTask_command(s)
	}
}

func (p *WdlV1_1Parser) Task_command() (localctx ITask_commandContext) {
	localctx = NewTask_commandContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, WdlV1_1ParserRULE_task_command)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(657)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 57, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(635)
			p.Match(WdlV1_1ParserCOMMAND)
		}
		{
			p.SetState(636)
			p.Match(WdlV1_1ParserBeginLBrace)
		}
		{
			p.SetState(637)
			p.Task_command_string_part()
		}
		p.SetState(641)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == WdlV1_1ParserStringCommandStart {
			{
				p.SetState(638)
				p.Task_command_expr_with_string()
			}

			p.SetState(643)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(644)
			p.Match(WdlV1_1ParserEndCommand)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(646)
			p.Match(WdlV1_1ParserCOMMAND)
		}
		{
			p.SetState(647)
			p.Match(WdlV1_1ParserBeginHereDoc)
		}
		{
			p.SetState(648)
			p.Task_command_string_part()
		}
		p.SetState(652)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == WdlV1_1ParserStringCommandStart {
			{
				p.SetState(649)
				p.Task_command_expr_with_string()
			}

			p.SetState(654)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(655)
			p.Match(WdlV1_1ParserEndCommand)
		}

	}

	return localctx
}

// ITask_elementContext is an interface to support dynamic dispatch.
type ITask_elementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTask_elementContext differentiates from other interfaces.
	IsTask_elementContext()
}

type Task_elementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTask_elementContext() *Task_elementContext {
	var p = new(Task_elementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_task_element
	return p
}

func (*Task_elementContext) IsTask_elementContext() {}

func NewTask_elementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Task_elementContext {
	var p = new(Task_elementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_task_element

	return p
}

func (s *Task_elementContext) GetParser() antlr.Parser { return s.parser }

func (s *Task_elementContext) Task_input() ITask_inputContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITask_inputContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITask_inputContext)
}

func (s *Task_elementContext) Task_output() ITask_outputContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITask_outputContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITask_outputContext)
}

func (s *Task_elementContext) Task_command() ITask_commandContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITask_commandContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITask_commandContext)
}

func (s *Task_elementContext) Task_runtime() ITask_runtimeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITask_runtimeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITask_runtimeContext)
}

func (s *Task_elementContext) Bound_decls() IBound_declsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBound_declsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBound_declsContext)
}

func (s *Task_elementContext) Parameter_meta() IParameter_metaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameter_metaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameter_metaContext)
}

func (s *Task_elementContext) Meta() IMetaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMetaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMetaContext)
}

func (s *Task_elementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Task_elementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Task_elementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterTask_element(s)
	}
}

func (s *Task_elementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitTask_element(s)
	}
}

func (p *WdlV1_1Parser) Task_element() (localctx ITask_elementContext) {
	localctx = NewTask_elementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, WdlV1_1ParserRULE_task_element)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(666)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case WdlV1_1ParserINPUT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(659)
			p.Task_input()
		}

	case WdlV1_1ParserOUTPUT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(660)
			p.Task_output()
		}

	case WdlV1_1ParserCOMMAND:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(661)
			p.Task_command()
		}

	case WdlV1_1ParserRUNTIME:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(662)
			p.Task_runtime()
		}

	case WdlV1_1ParserBOOLEAN, WdlV1_1ParserINT, WdlV1_1ParserFLOAT, WdlV1_1ParserSTRING, WdlV1_1ParserFILE, WdlV1_1ParserARRAY, WdlV1_1ParserMAP, WdlV1_1ParserOBJECT, WdlV1_1ParserPAIR, WdlV1_1ParserIdentifier:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(663)
			p.Bound_decls()
		}

	case WdlV1_1ParserPARAMETERMETA:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(664)
			p.Parameter_meta()
		}

	case WdlV1_1ParserMETA:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(665)
			p.Meta()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITaskContext is an interface to support dynamic dispatch.
type ITaskContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTaskContext differentiates from other interfaces.
	IsTaskContext()
}

type TaskContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTaskContext() *TaskContext {
	var p = new(TaskContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_task
	return p
}

func (*TaskContext) IsTaskContext() {}

func NewTaskContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TaskContext {
	var p = new(TaskContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_task

	return p
}

func (s *TaskContext) GetParser() antlr.Parser { return s.parser }

func (s *TaskContext) TASK() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserTASK, 0)
}

func (s *TaskContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *TaskContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACE, 0)
}

func (s *TaskContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACE, 0)
}

func (s *TaskContext) AllTask_element() []ITask_elementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITask_elementContext)(nil)).Elem())
	var tst = make([]ITask_elementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITask_elementContext)
		}
	}

	return tst
}

func (s *TaskContext) Task_element(i int) ITask_elementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITask_elementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITask_elementContext)
}

func (s *TaskContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TaskContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TaskContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterTask(s)
	}
}

func (s *TaskContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitTask(s)
	}
}

func (p *WdlV1_1Parser) Task() (localctx ITaskContext) {
	localctx = NewTaskContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, WdlV1_1ParserRULE_task)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(668)
		p.Match(WdlV1_1ParserTASK)
	}
	{
		p.SetState(669)
		p.Match(WdlV1_1ParserIdentifier)
	}
	{
		p.SetState(670)
		p.Match(WdlV1_1ParserLBRACE)
	}
	p.SetState(672)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la-15)&-(0x1f+1)) == 0 && ((1<<uint((_la-15)))&((1<<(WdlV1_1ParserINPUT-15))|(1<<(WdlV1_1ParserOUTPUT-15))|(1<<(WdlV1_1ParserPARAMETERMETA-15))|(1<<(WdlV1_1ParserMETA-15))|(1<<(WdlV1_1ParserRUNTIME-15))|(1<<(WdlV1_1ParserBOOLEAN-15))|(1<<(WdlV1_1ParserINT-15))|(1<<(WdlV1_1ParserFLOAT-15))|(1<<(WdlV1_1ParserSTRING-15))|(1<<(WdlV1_1ParserFILE-15))|(1<<(WdlV1_1ParserARRAY-15))|(1<<(WdlV1_1ParserMAP-15))|(1<<(WdlV1_1ParserOBJECT-15))|(1<<(WdlV1_1ParserPAIR-15))|(1<<(WdlV1_1ParserCOMMAND-15)))) != 0) || _la == WdlV1_1ParserIdentifier {
		{
			p.SetState(671)
			p.Task_element()
		}

		p.SetState(674)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(676)
		p.Match(WdlV1_1ParserRBRACE)
	}

	return localctx
}

// IInner_workflow_elementContext is an interface to support dynamic dispatch.
type IInner_workflow_elementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInner_workflow_elementContext differentiates from other interfaces.
	IsInner_workflow_elementContext()
}

type Inner_workflow_elementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInner_workflow_elementContext() *Inner_workflow_elementContext {
	var p = new(Inner_workflow_elementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_inner_workflow_element
	return p
}

func (*Inner_workflow_elementContext) IsInner_workflow_elementContext() {}

func NewInner_workflow_elementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Inner_workflow_elementContext {
	var p = new(Inner_workflow_elementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_inner_workflow_element

	return p
}

func (s *Inner_workflow_elementContext) GetParser() antlr.Parser { return s.parser }

func (s *Inner_workflow_elementContext) Bound_decls() IBound_declsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBound_declsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBound_declsContext)
}

func (s *Inner_workflow_elementContext) Call() ICallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallContext)
}

func (s *Inner_workflow_elementContext) Scatter() IScatterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScatterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScatterContext)
}

func (s *Inner_workflow_elementContext) Conditional() IConditionalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionalContext)
}

func (s *Inner_workflow_elementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Inner_workflow_elementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Inner_workflow_elementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterInner_workflow_element(s)
	}
}

func (s *Inner_workflow_elementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitInner_workflow_element(s)
	}
}

func (p *WdlV1_1Parser) Inner_workflow_element() (localctx IInner_workflow_elementContext) {
	localctx = NewInner_workflow_elementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, WdlV1_1ParserRULE_inner_workflow_element)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(682)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case WdlV1_1ParserBOOLEAN, WdlV1_1ParserINT, WdlV1_1ParserFLOAT, WdlV1_1ParserSTRING, WdlV1_1ParserFILE, WdlV1_1ParserARRAY, WdlV1_1ParserMAP, WdlV1_1ParserOBJECT, WdlV1_1ParserPAIR, WdlV1_1ParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(678)
			p.Bound_decls()
		}

	case WdlV1_1ParserCALL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(679)
			p.Call()
		}

	case WdlV1_1ParserSCATTER:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(680)
			p.Scatter()
		}

	case WdlV1_1ParserIF:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(681)
			p.Conditional()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICall_aliasContext is an interface to support dynamic dispatch.
type ICall_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCall_aliasContext differentiates from other interfaces.
	IsCall_aliasContext()
}

type Call_aliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCall_aliasContext() *Call_aliasContext {
	var p = new(Call_aliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_call_alias
	return p
}

func (*Call_aliasContext) IsCall_aliasContext() {}

func NewCall_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Call_aliasContext {
	var p = new(Call_aliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_call_alias

	return p
}

func (s *Call_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *Call_aliasContext) AS() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserAS, 0)
}

func (s *Call_aliasContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *Call_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Call_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Call_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterCall_alias(s)
	}
}

func (s *Call_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitCall_alias(s)
	}
}

func (p *WdlV1_1Parser) Call_alias() (localctx ICall_aliasContext) {
	localctx = NewCall_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, WdlV1_1ParserRULE_call_alias)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(684)
		p.Match(WdlV1_1ParserAS)
	}
	{
		p.SetState(685)
		p.Match(WdlV1_1ParserIdentifier)
	}

	return localctx
}

// ICall_inputContext is an interface to support dynamic dispatch.
type ICall_inputContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCall_inputContext differentiates from other interfaces.
	IsCall_inputContext()
}

type Call_inputContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCall_inputContext() *Call_inputContext {
	var p = new(Call_inputContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_call_input
	return p
}

func (*Call_inputContext) IsCall_inputContext() {}

func NewCall_inputContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Call_inputContext {
	var p = new(Call_inputContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_call_input

	return p
}

func (s *Call_inputContext) GetParser() antlr.Parser { return s.parser }

func (s *Call_inputContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *Call_inputContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserEQUAL, 0)
}

func (s *Call_inputContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Call_inputContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Call_inputContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Call_inputContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterCall_input(s)
	}
}

func (s *Call_inputContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitCall_input(s)
	}
}

func (p *WdlV1_1Parser) Call_input() (localctx ICall_inputContext) {
	localctx = NewCall_inputContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, WdlV1_1ParserRULE_call_input)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(687)
		p.Match(WdlV1_1ParserIdentifier)
	}
	p.SetState(690)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == WdlV1_1ParserEQUAL {
		{
			p.SetState(688)
			p.Match(WdlV1_1ParserEQUAL)
		}
		{
			p.SetState(689)
			p.Expr()
		}

	}

	return localctx
}

// ICall_inputsContext is an interface to support dynamic dispatch.
type ICall_inputsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCall_inputsContext differentiates from other interfaces.
	IsCall_inputsContext()
}

type Call_inputsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCall_inputsContext() *Call_inputsContext {
	var p = new(Call_inputsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_call_inputs
	return p
}

func (*Call_inputsContext) IsCall_inputsContext() {}

func NewCall_inputsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Call_inputsContext {
	var p = new(Call_inputsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_call_inputs

	return p
}

func (s *Call_inputsContext) GetParser() antlr.Parser { return s.parser }

func (s *Call_inputsContext) INPUT() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserINPUT, 0)
}

func (s *Call_inputsContext) COLON() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCOLON, 0)
}

func (s *Call_inputsContext) AllCall_input() []ICall_inputContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICall_inputContext)(nil)).Elem())
	var tst = make([]ICall_inputContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICall_inputContext)
		}
	}

	return tst
}

func (s *Call_inputsContext) Call_input(i int) ICall_inputContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICall_inputContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICall_inputContext)
}

func (s *Call_inputsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserCOMMA)
}

func (s *Call_inputsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCOMMA, i)
}

func (s *Call_inputsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Call_inputsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Call_inputsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterCall_inputs(s)
	}
}

func (s *Call_inputsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitCall_inputs(s)
	}
}

func (p *WdlV1_1Parser) Call_inputs() (localctx ICall_inputsContext) {
	localctx = NewCall_inputsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, WdlV1_1ParserRULE_call_inputs)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(692)
		p.Match(WdlV1_1ParserINPUT)
	}
	{
		p.SetState(693)
		p.Match(WdlV1_1ParserCOLON)
	}
	p.SetState(707)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == WdlV1_1ParserIdentifier {
		{
			p.SetState(694)
			p.Call_input()
		}
		p.SetState(699)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 62, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(695)
					p.Match(WdlV1_1ParserCOMMA)
				}
				{
					p.SetState(696)
					p.Call_input()
				}

			}
			p.SetState(701)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 62, p.GetParserRuleContext())
		}
		p.SetState(703)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == WdlV1_1ParserCOMMA {
			{
				p.SetState(702)
				p.Match(WdlV1_1ParserCOMMA)
			}

		}

		p.SetState(709)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICall_bodyContext is an interface to support dynamic dispatch.
type ICall_bodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCall_bodyContext differentiates from other interfaces.
	IsCall_bodyContext()
}

type Call_bodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCall_bodyContext() *Call_bodyContext {
	var p = new(Call_bodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_call_body
	return p
}

func (*Call_bodyContext) IsCall_bodyContext() {}

func NewCall_bodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Call_bodyContext {
	var p = new(Call_bodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_call_body

	return p
}

func (s *Call_bodyContext) GetParser() antlr.Parser { return s.parser }

func (s *Call_bodyContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACE, 0)
}

func (s *Call_bodyContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACE, 0)
}

func (s *Call_bodyContext) Call_inputs() ICall_inputsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICall_inputsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICall_inputsContext)
}

func (s *Call_bodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Call_bodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Call_bodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterCall_body(s)
	}
}

func (s *Call_bodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitCall_body(s)
	}
}

func (p *WdlV1_1Parser) Call_body() (localctx ICall_bodyContext) {
	localctx = NewCall_bodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, WdlV1_1ParserRULE_call_body)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(710)
		p.Match(WdlV1_1ParserLBRACE)
	}
	p.SetState(712)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == WdlV1_1ParserINPUT {
		{
			p.SetState(711)
			p.Call_inputs()
		}

	}
	{
		p.SetState(714)
		p.Match(WdlV1_1ParserRBRACE)
	}

	return localctx
}

// ICall_afterContext is an interface to support dynamic dispatch.
type ICall_afterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCall_afterContext differentiates from other interfaces.
	IsCall_afterContext()
}

type Call_afterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCall_afterContext() *Call_afterContext {
	var p = new(Call_afterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_call_after
	return p
}

func (*Call_afterContext) IsCall_afterContext() {}

func NewCall_afterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Call_afterContext {
	var p = new(Call_afterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_call_after

	return p
}

func (s *Call_afterContext) GetParser() antlr.Parser { return s.parser }

func (s *Call_afterContext) AFTER() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserAFTER, 0)
}

func (s *Call_afterContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *Call_afterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Call_afterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Call_afterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterCall_after(s)
	}
}

func (s *Call_afterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitCall_after(s)
	}
}

func (p *WdlV1_1Parser) Call_after() (localctx ICall_afterContext) {
	localctx = NewCall_afterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, WdlV1_1ParserRULE_call_after)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(716)
		p.Match(WdlV1_1ParserAFTER)
	}
	{
		p.SetState(717)
		p.Match(WdlV1_1ParserIdentifier)
	}

	return localctx
}

// ICall_nameContext is an interface to support dynamic dispatch.
type ICall_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCall_nameContext differentiates from other interfaces.
	IsCall_nameContext()
}

type Call_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCall_nameContext() *Call_nameContext {
	var p = new(Call_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_call_name
	return p
}

func (*Call_nameContext) IsCall_nameContext() {}

func NewCall_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Call_nameContext {
	var p = new(Call_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_call_name

	return p
}

func (s *Call_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Call_nameContext) AllIdentifier() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserIdentifier)
}

func (s *Call_nameContext) Identifier(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, i)
}

func (s *Call_nameContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(WdlV1_1ParserDOT)
}

func (s *Call_nameContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserDOT, i)
}

func (s *Call_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Call_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Call_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterCall_name(s)
	}
}

func (s *Call_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitCall_name(s)
	}
}

func (p *WdlV1_1Parser) Call_name() (localctx ICall_nameContext) {
	localctx = NewCall_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, WdlV1_1ParserRULE_call_name)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(719)
		p.Match(WdlV1_1ParserIdentifier)
	}
	p.SetState(724)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == WdlV1_1ParserDOT {
		{
			p.SetState(720)
			p.Match(WdlV1_1ParserDOT)
		}
		{
			p.SetState(721)
			p.Match(WdlV1_1ParserIdentifier)
		}

		p.SetState(726)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICallContext is an interface to support dynamic dispatch.
type ICallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallContext differentiates from other interfaces.
	IsCallContext()
}

type CallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallContext() *CallContext {
	var p = new(CallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_call
	return p
}

func (*CallContext) IsCallContext() {}

func NewCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallContext {
	var p = new(CallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_call

	return p
}

func (s *CallContext) GetParser() antlr.Parser { return s.parser }

func (s *CallContext) CALL() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserCALL, 0)
}

func (s *CallContext) Call_name() ICall_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICall_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICall_nameContext)
}

func (s *CallContext) Call_alias() ICall_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICall_aliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICall_aliasContext)
}

func (s *CallContext) AllCall_after() []ICall_afterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICall_afterContext)(nil)).Elem())
	var tst = make([]ICall_afterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICall_afterContext)
		}
	}

	return tst
}

func (s *CallContext) Call_after(i int) ICall_afterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICall_afterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICall_afterContext)
}

func (s *CallContext) Call_body() ICall_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICall_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICall_bodyContext)
}

func (s *CallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterCall(s)
	}
}

func (s *CallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitCall(s)
	}
}

func (p *WdlV1_1Parser) Call() (localctx ICallContext) {
	localctx = NewCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, WdlV1_1ParserRULE_call)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(727)
		p.Match(WdlV1_1ParserCALL)
	}
	{
		p.SetState(728)
		p.Call_name()
	}
	p.SetState(730)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == WdlV1_1ParserAS {
		{
			p.SetState(729)
			p.Call_alias()
		}

	}
	p.SetState(735)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == WdlV1_1ParserAFTER {
		{
			p.SetState(732)
			p.Call_after()
		}

		p.SetState(737)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(739)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == WdlV1_1ParserLBRACE {
		{
			p.SetState(738)
			p.Call_body()
		}

	}

	return localctx
}

// IScatterContext is an interface to support dynamic dispatch.
type IScatterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsScatterContext differentiates from other interfaces.
	IsScatterContext()
}

type ScatterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyScatterContext() *ScatterContext {
	var p = new(ScatterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_scatter
	return p
}

func (*ScatterContext) IsScatterContext() {}

func NewScatterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ScatterContext {
	var p = new(ScatterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_scatter

	return p
}

func (s *ScatterContext) GetParser() antlr.Parser { return s.parser }

func (s *ScatterContext) SCATTER() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserSCATTER, 0)
}

func (s *ScatterContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLPAREN, 0)
}

func (s *ScatterContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *ScatterContext) In() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIn, 0)
}

func (s *ScatterContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ScatterContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRPAREN, 0)
}

func (s *ScatterContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACE, 0)
}

func (s *ScatterContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACE, 0)
}

func (s *ScatterContext) AllInner_workflow_element() []IInner_workflow_elementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInner_workflow_elementContext)(nil)).Elem())
	var tst = make([]IInner_workflow_elementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInner_workflow_elementContext)
		}
	}

	return tst
}

func (s *ScatterContext) Inner_workflow_element(i int) IInner_workflow_elementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInner_workflow_elementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInner_workflow_elementContext)
}

func (s *ScatterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ScatterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ScatterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterScatter(s)
	}
}

func (s *ScatterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitScatter(s)
	}
}

func (p *WdlV1_1Parser) Scatter() (localctx IScatterContext) {
	localctx = NewScatterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, WdlV1_1ParserRULE_scatter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(741)
		p.Match(WdlV1_1ParserSCATTER)
	}
	{
		p.SetState(742)
		p.Match(WdlV1_1ParserLPAREN)
	}
	{
		p.SetState(743)
		p.Match(WdlV1_1ParserIdentifier)
	}
	{
		p.SetState(744)
		p.Match(WdlV1_1ParserIn)
	}
	{
		p.SetState(745)
		p.Expr()
	}
	{
		p.SetState(746)
		p.Match(WdlV1_1ParserRPAREN)
	}
	{
		p.SetState(747)
		p.Match(WdlV1_1ParserLBRACE)
	}
	p.SetState(751)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<WdlV1_1ParserSCATTER)|(1<<WdlV1_1ParserCALL)|(1<<WdlV1_1ParserIF)|(1<<WdlV1_1ParserBOOLEAN)|(1<<WdlV1_1ParserINT)|(1<<WdlV1_1ParserFLOAT)|(1<<WdlV1_1ParserSTRING)|(1<<WdlV1_1ParserFILE)|(1<<WdlV1_1ParserARRAY)|(1<<WdlV1_1ParserMAP)|(1<<WdlV1_1ParserOBJECT)|(1<<WdlV1_1ParserPAIR))) != 0) || _la == WdlV1_1ParserIdentifier {
		{
			p.SetState(748)
			p.Inner_workflow_element()
		}

		p.SetState(753)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(754)
		p.Match(WdlV1_1ParserRBRACE)
	}

	return localctx
}

// IConditionalContext is an interface to support dynamic dispatch.
type IConditionalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionalContext differentiates from other interfaces.
	IsConditionalContext()
}

type ConditionalContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionalContext() *ConditionalContext {
	var p = new(ConditionalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_conditional
	return p
}

func (*ConditionalContext) IsConditionalContext() {}

func NewConditionalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionalContext {
	var p = new(ConditionalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_conditional

	return p
}

func (s *ConditionalContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionalContext) IF() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIF, 0)
}

func (s *ConditionalContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLPAREN, 0)
}

func (s *ConditionalContext) Expr() IExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ConditionalContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRPAREN, 0)
}

func (s *ConditionalContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACE, 0)
}

func (s *ConditionalContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACE, 0)
}

func (s *ConditionalContext) AllInner_workflow_element() []IInner_workflow_elementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInner_workflow_elementContext)(nil)).Elem())
	var tst = make([]IInner_workflow_elementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInner_workflow_elementContext)
		}
	}

	return tst
}

func (s *ConditionalContext) Inner_workflow_element(i int) IInner_workflow_elementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInner_workflow_elementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInner_workflow_elementContext)
}

func (s *ConditionalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterConditional(s)
	}
}

func (s *ConditionalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitConditional(s)
	}
}

func (p *WdlV1_1Parser) Conditional() (localctx IConditionalContext) {
	localctx = NewConditionalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, WdlV1_1ParserRULE_conditional)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(756)
		p.Match(WdlV1_1ParserIF)
	}
	{
		p.SetState(757)
		p.Match(WdlV1_1ParserLPAREN)
	}
	{
		p.SetState(758)
		p.Expr()
	}
	{
		p.SetState(759)
		p.Match(WdlV1_1ParserRPAREN)
	}
	{
		p.SetState(760)
		p.Match(WdlV1_1ParserLBRACE)
	}
	p.SetState(764)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<WdlV1_1ParserSCATTER)|(1<<WdlV1_1ParserCALL)|(1<<WdlV1_1ParserIF)|(1<<WdlV1_1ParserBOOLEAN)|(1<<WdlV1_1ParserINT)|(1<<WdlV1_1ParserFLOAT)|(1<<WdlV1_1ParserSTRING)|(1<<WdlV1_1ParserFILE)|(1<<WdlV1_1ParserARRAY)|(1<<WdlV1_1ParserMAP)|(1<<WdlV1_1ParserOBJECT)|(1<<WdlV1_1ParserPAIR))) != 0) || _la == WdlV1_1ParserIdentifier {
		{
			p.SetState(761)
			p.Inner_workflow_element()
		}

		p.SetState(766)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(767)
		p.Match(WdlV1_1ParserRBRACE)
	}

	return localctx
}

// IWorkflow_inputContext is an interface to support dynamic dispatch.
type IWorkflow_inputContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWorkflow_inputContext differentiates from other interfaces.
	IsWorkflow_inputContext()
}

type Workflow_inputContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWorkflow_inputContext() *Workflow_inputContext {
	var p = new(Workflow_inputContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_workflow_input
	return p
}

func (*Workflow_inputContext) IsWorkflow_inputContext() {}

func NewWorkflow_inputContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Workflow_inputContext {
	var p = new(Workflow_inputContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_workflow_input

	return p
}

func (s *Workflow_inputContext) GetParser() antlr.Parser { return s.parser }

func (s *Workflow_inputContext) INPUT() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserINPUT, 0)
}

func (s *Workflow_inputContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACE, 0)
}

func (s *Workflow_inputContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACE, 0)
}

func (s *Workflow_inputContext) AllAny_decls() []IAny_declsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAny_declsContext)(nil)).Elem())
	var tst = make([]IAny_declsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAny_declsContext)
		}
	}

	return tst
}

func (s *Workflow_inputContext) Any_decls(i int) IAny_declsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAny_declsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAny_declsContext)
}

func (s *Workflow_inputContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Workflow_inputContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Workflow_inputContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterWorkflow_input(s)
	}
}

func (s *Workflow_inputContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitWorkflow_input(s)
	}
}

func (p *WdlV1_1Parser) Workflow_input() (localctx IWorkflow_inputContext) {
	localctx = NewWorkflow_inputContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, WdlV1_1ParserRULE_workflow_input)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(769)
		p.Match(WdlV1_1ParserINPUT)
	}
	{
		p.SetState(770)
		p.Match(WdlV1_1ParserLBRACE)
	}
	p.SetState(774)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<WdlV1_1ParserBOOLEAN)|(1<<WdlV1_1ParserINT)|(1<<WdlV1_1ParserFLOAT)|(1<<WdlV1_1ParserSTRING)|(1<<WdlV1_1ParserFILE)|(1<<WdlV1_1ParserARRAY)|(1<<WdlV1_1ParserMAP)|(1<<WdlV1_1ParserOBJECT)|(1<<WdlV1_1ParserPAIR))) != 0) || _la == WdlV1_1ParserIdentifier {
		{
			p.SetState(771)
			p.Any_decls()
		}

		p.SetState(776)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(777)
		p.Match(WdlV1_1ParserRBRACE)
	}

	return localctx
}

// IWorkflow_outputContext is an interface to support dynamic dispatch.
type IWorkflow_outputContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWorkflow_outputContext differentiates from other interfaces.
	IsWorkflow_outputContext()
}

type Workflow_outputContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWorkflow_outputContext() *Workflow_outputContext {
	var p = new(Workflow_outputContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_workflow_output
	return p
}

func (*Workflow_outputContext) IsWorkflow_outputContext() {}

func NewWorkflow_outputContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Workflow_outputContext {
	var p = new(Workflow_outputContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_workflow_output

	return p
}

func (s *Workflow_outputContext) GetParser() antlr.Parser { return s.parser }

func (s *Workflow_outputContext) OUTPUT() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserOUTPUT, 0)
}

func (s *Workflow_outputContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACE, 0)
}

func (s *Workflow_outputContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACE, 0)
}

func (s *Workflow_outputContext) AllBound_decls() []IBound_declsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBound_declsContext)(nil)).Elem())
	var tst = make([]IBound_declsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBound_declsContext)
		}
	}

	return tst
}

func (s *Workflow_outputContext) Bound_decls(i int) IBound_declsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBound_declsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBound_declsContext)
}

func (s *Workflow_outputContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Workflow_outputContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Workflow_outputContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterWorkflow_output(s)
	}
}

func (s *Workflow_outputContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitWorkflow_output(s)
	}
}

func (p *WdlV1_1Parser) Workflow_output() (localctx IWorkflow_outputContext) {
	localctx = NewWorkflow_outputContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, WdlV1_1ParserRULE_workflow_output)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(779)
		p.Match(WdlV1_1ParserOUTPUT)
	}
	{
		p.SetState(780)
		p.Match(WdlV1_1ParserLBRACE)
	}
	p.SetState(784)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<WdlV1_1ParserBOOLEAN)|(1<<WdlV1_1ParserINT)|(1<<WdlV1_1ParserFLOAT)|(1<<WdlV1_1ParserSTRING)|(1<<WdlV1_1ParserFILE)|(1<<WdlV1_1ParserARRAY)|(1<<WdlV1_1ParserMAP)|(1<<WdlV1_1ParserOBJECT)|(1<<WdlV1_1ParserPAIR))) != 0) || _la == WdlV1_1ParserIdentifier {
		{
			p.SetState(781)
			p.Bound_decls()
		}

		p.SetState(786)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(787)
		p.Match(WdlV1_1ParserRBRACE)
	}

	return localctx
}

// IWorkflow_elementContext is an interface to support dynamic dispatch.
type IWorkflow_elementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWorkflow_elementContext differentiates from other interfaces.
	IsWorkflow_elementContext()
}

type Workflow_elementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWorkflow_elementContext() *Workflow_elementContext {
	var p = new(Workflow_elementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_workflow_element
	return p
}

func (*Workflow_elementContext) IsWorkflow_elementContext() {}

func NewWorkflow_elementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Workflow_elementContext {
	var p = new(Workflow_elementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_workflow_element

	return p
}

func (s *Workflow_elementContext) GetParser() antlr.Parser { return s.parser }

func (s *Workflow_elementContext) CopyFrom(ctx *Workflow_elementContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Workflow_elementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Workflow_elementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type OutputContext struct {
	*Workflow_elementContext
}

func NewOutputContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *OutputContext {
	var p = new(OutputContext)

	p.Workflow_elementContext = NewEmptyWorkflow_elementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Workflow_elementContext))

	return p
}

func (s *OutputContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OutputContext) Workflow_output() IWorkflow_outputContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWorkflow_outputContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWorkflow_outputContext)
}

func (s *OutputContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterOutput(s)
	}
}

func (s *OutputContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitOutput(s)
	}
}

type InputContext struct {
	*Workflow_elementContext
}

func NewInputContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InputContext {
	var p = new(InputContext)

	p.Workflow_elementContext = NewEmptyWorkflow_elementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Workflow_elementContext))

	return p
}

func (s *InputContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InputContext) Workflow_input() IWorkflow_inputContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWorkflow_inputContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWorkflow_inputContext)
}

func (s *InputContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterInput(s)
	}
}

func (s *InputContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitInput(s)
	}
}

type Parameter_meta_elementContext struct {
	*Workflow_elementContext
}

func NewParameter_meta_elementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Parameter_meta_elementContext {
	var p = new(Parameter_meta_elementContext)

	p.Workflow_elementContext = NewEmptyWorkflow_elementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Workflow_elementContext))

	return p
}

func (s *Parameter_meta_elementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parameter_meta_elementContext) Parameter_meta() IParameter_metaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameter_metaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameter_metaContext)
}

func (s *Parameter_meta_elementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterParameter_meta_element(s)
	}
}

func (s *Parameter_meta_elementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitParameter_meta_element(s)
	}
}

type Meta_elementContext struct {
	*Workflow_elementContext
}

func NewMeta_elementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Meta_elementContext {
	var p = new(Meta_elementContext)

	p.Workflow_elementContext = NewEmptyWorkflow_elementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Workflow_elementContext))

	return p
}

func (s *Meta_elementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Meta_elementContext) Meta() IMetaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMetaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMetaContext)
}

func (s *Meta_elementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterMeta_element(s)
	}
}

func (s *Meta_elementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitMeta_element(s)
	}
}

type Inner_elementContext struct {
	*Workflow_elementContext
}

func NewInner_elementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Inner_elementContext {
	var p = new(Inner_elementContext)

	p.Workflow_elementContext = NewEmptyWorkflow_elementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Workflow_elementContext))

	return p
}

func (s *Inner_elementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Inner_elementContext) Inner_workflow_element() IInner_workflow_elementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInner_workflow_elementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInner_workflow_elementContext)
}

func (s *Inner_elementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterInner_element(s)
	}
}

func (s *Inner_elementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitInner_element(s)
	}
}

func (p *WdlV1_1Parser) Workflow_element() (localctx IWorkflow_elementContext) {
	localctx = NewWorkflow_elementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, WdlV1_1ParserRULE_workflow_element)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(794)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case WdlV1_1ParserINPUT:
		localctx = NewInputContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(789)
			p.Workflow_input()
		}

	case WdlV1_1ParserOUTPUT:
		localctx = NewOutputContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(790)
			p.Workflow_output()
		}

	case WdlV1_1ParserSCATTER, WdlV1_1ParserCALL, WdlV1_1ParserIF, WdlV1_1ParserBOOLEAN, WdlV1_1ParserINT, WdlV1_1ParserFLOAT, WdlV1_1ParserSTRING, WdlV1_1ParserFILE, WdlV1_1ParserARRAY, WdlV1_1ParserMAP, WdlV1_1ParserOBJECT, WdlV1_1ParserPAIR, WdlV1_1ParserIdentifier:
		localctx = NewInner_elementContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(791)
			p.Inner_workflow_element()
		}

	case WdlV1_1ParserPARAMETERMETA:
		localctx = NewParameter_meta_elementContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(792)
			p.Parameter_meta()
		}

	case WdlV1_1ParserMETA:
		localctx = NewMeta_elementContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(793)
			p.Meta()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IWorkflowContext is an interface to support dynamic dispatch.
type IWorkflowContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWorkflowContext differentiates from other interfaces.
	IsWorkflowContext()
}

type WorkflowContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWorkflowContext() *WorkflowContext {
	var p = new(WorkflowContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_workflow
	return p
}

func (*WorkflowContext) IsWorkflowContext() {}

func NewWorkflowContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WorkflowContext {
	var p = new(WorkflowContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_workflow

	return p
}

func (s *WorkflowContext) GetParser() antlr.Parser { return s.parser }

func (s *WorkflowContext) WORKFLOW() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserWORKFLOW, 0)
}

func (s *WorkflowContext) Identifier() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserIdentifier, 0)
}

func (s *WorkflowContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserLBRACE, 0)
}

func (s *WorkflowContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserRBRACE, 0)
}

func (s *WorkflowContext) AllWorkflow_element() []IWorkflow_elementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWorkflow_elementContext)(nil)).Elem())
	var tst = make([]IWorkflow_elementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWorkflow_elementContext)
		}
	}

	return tst
}

func (s *WorkflowContext) Workflow_element(i int) IWorkflow_elementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWorkflow_elementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWorkflow_elementContext)
}

func (s *WorkflowContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WorkflowContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WorkflowContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterWorkflow(s)
	}
}

func (s *WorkflowContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitWorkflow(s)
	}
}

func (p *WdlV1_1Parser) Workflow() (localctx IWorkflowContext) {
	localctx = NewWorkflowContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, WdlV1_1ParserRULE_workflow)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(796)
		p.Match(WdlV1_1ParserWORKFLOW)
	}
	{
		p.SetState(797)
		p.Match(WdlV1_1ParserIdentifier)
	}
	{
		p.SetState(798)
		p.Match(WdlV1_1ParserLBRACE)
	}
	p.SetState(802)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<WdlV1_1ParserSCATTER)|(1<<WdlV1_1ParserCALL)|(1<<WdlV1_1ParserIF)|(1<<WdlV1_1ParserINPUT)|(1<<WdlV1_1ParserOUTPUT)|(1<<WdlV1_1ParserPARAMETERMETA)|(1<<WdlV1_1ParserMETA)|(1<<WdlV1_1ParserBOOLEAN)|(1<<WdlV1_1ParserINT)|(1<<WdlV1_1ParserFLOAT)|(1<<WdlV1_1ParserSTRING)|(1<<WdlV1_1ParserFILE)|(1<<WdlV1_1ParserARRAY)|(1<<WdlV1_1ParserMAP)|(1<<WdlV1_1ParserOBJECT)|(1<<WdlV1_1ParserPAIR))) != 0) || _la == WdlV1_1ParserIdentifier {
		{
			p.SetState(799)
			p.Workflow_element()
		}

		p.SetState(804)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(805)
		p.Match(WdlV1_1ParserRBRACE)
	}

	return localctx
}

// IDocument_elementContext is an interface to support dynamic dispatch.
type IDocument_elementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDocument_elementContext differentiates from other interfaces.
	IsDocument_elementContext()
}

type Document_elementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDocument_elementContext() *Document_elementContext {
	var p = new(Document_elementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_document_element
	return p
}

func (*Document_elementContext) IsDocument_elementContext() {}

func NewDocument_elementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Document_elementContext {
	var p = new(Document_elementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_document_element

	return p
}

func (s *Document_elementContext) GetParser() antlr.Parser { return s.parser }

func (s *Document_elementContext) Import_doc() IImport_docContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImport_docContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImport_docContext)
}

func (s *Document_elementContext) R_struct() IR_structContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IR_structContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IR_structContext)
}

func (s *Document_elementContext) Task() ITaskContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITaskContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITaskContext)
}

func (s *Document_elementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Document_elementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Document_elementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterDocument_element(s)
	}
}

func (s *Document_elementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitDocument_element(s)
	}
}

func (p *WdlV1_1Parser) Document_element() (localctx IDocument_elementContext) {
	localctx = NewDocument_elementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, WdlV1_1ParserRULE_document_element)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(810)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case WdlV1_1ParserIMPORT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(807)
			p.Import_doc()
		}

	case WdlV1_1ParserSTRUCT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(808)
			p.R_struct()
		}

	case WdlV1_1ParserTASK:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(809)
			p.Task()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDocumentContext is an interface to support dynamic dispatch.
type IDocumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDocumentContext differentiates from other interfaces.
	IsDocumentContext()
}

type DocumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDocumentContext() *DocumentContext {
	var p = new(DocumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = WdlV1_1ParserRULE_document
	return p
}

func (*DocumentContext) IsDocumentContext() {}

func NewDocumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DocumentContext {
	var p = new(DocumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = WdlV1_1ParserRULE_document

	return p
}

func (s *DocumentContext) GetParser() antlr.Parser { return s.parser }

func (s *DocumentContext) Version() IVersionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVersionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVersionContext)
}

func (s *DocumentContext) EOF() antlr.TerminalNode {
	return s.GetToken(WdlV1_1ParserEOF, 0)
}

func (s *DocumentContext) AllDocument_element() []IDocument_elementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDocument_elementContext)(nil)).Elem())
	var tst = make([]IDocument_elementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDocument_elementContext)
		}
	}

	return tst
}

func (s *DocumentContext) Document_element(i int) IDocument_elementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDocument_elementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDocument_elementContext)
}

func (s *DocumentContext) Workflow() IWorkflowContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWorkflowContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWorkflowContext)
}

func (s *DocumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DocumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DocumentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.EnterDocument(s)
	}
}

func (s *DocumentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(WdlV1_1ParserListener); ok {
		listenerT.ExitDocument(s)
	}
}

func (p *WdlV1_1Parser) Document() (localctx IDocumentContext) {
	localctx = NewDocumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, WdlV1_1ParserRULE_document)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(812)
		p.Version()
	}
	p.SetState(816)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<WdlV1_1ParserIMPORT)|(1<<WdlV1_1ParserTASK)|(1<<WdlV1_1ParserSTRUCT))) != 0 {
		{
			p.SetState(813)
			p.Document_element()
		}

		p.SetState(818)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(826)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == WdlV1_1ParserWORKFLOW {
		{
			p.SetState(819)
			p.Workflow()
		}
		p.SetState(823)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<WdlV1_1ParserIMPORT)|(1<<WdlV1_1ParserTASK)|(1<<WdlV1_1ParserSTRUCT))) != 0 {
			{
				p.SetState(820)
				p.Document_element()
			}

			p.SetState(825)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(828)
		p.Match(WdlV1_1ParserEOF)
	}

	return localctx
}

func (p *WdlV1_1Parser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 17:
		var t *Expr_infix0Context = nil
		if localctx != nil {
			t = localctx.(*Expr_infix0Context)
		}
		return p.Expr_infix0_Sempred(t, predIndex)

	case 18:
		var t *Expr_infix1Context = nil
		if localctx != nil {
			t = localctx.(*Expr_infix1Context)
		}
		return p.Expr_infix1_Sempred(t, predIndex)

	case 19:
		var t *Expr_infix2Context = nil
		if localctx != nil {
			t = localctx.(*Expr_infix2Context)
		}
		return p.Expr_infix2_Sempred(t, predIndex)

	case 20:
		var t *Expr_infix3Context = nil
		if localctx != nil {
			t = localctx.(*Expr_infix3Context)
		}
		return p.Expr_infix3_Sempred(t, predIndex)

	case 21:
		var t *Expr_infix4Context = nil
		if localctx != nil {
			t = localctx.(*Expr_infix4Context)
		}
		return p.Expr_infix4_Sempred(t, predIndex)

	case 24:
		var t *Expr_coreContext = nil
		if localctx != nil {
			t = localctx.(*Expr_coreContext)
		}
		return p.Expr_core_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *WdlV1_1Parser) Expr_infix0_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *WdlV1_1Parser) Expr_infix1_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *WdlV1_1Parser) Expr_infix2_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 2:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *WdlV1_1Parser) Expr_infix3_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 8:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *WdlV1_1Parser) Expr_infix4_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 10:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *WdlV1_1Parser) Expr_core_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 13:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 14:
		return p.Precpred(p.GetParserRuleContext(), 5)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
